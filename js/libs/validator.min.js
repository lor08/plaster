var domains = [];
var daterangepickerScroll;
var bithdayMaxYears = 99;
var bithdayDefaultYears = 30;
var emailTimeout;
var emailValidatorAjax;
var contractTimeout;
var dateInputChanged = false;

$.fn.getCursorPosition = function() {
	var input = this.get(0);
	if (!input) return; // No (input) element found
	if ('selectionStart' in input) {
		// Standard-compliant browsers
		return input.selectionStart;
	} else if (document.selection) {
		// IE
		input.focus();
		var sel = document.selection.createRange();
		var selLen = document.selection.createRange().text.length;
		sel.moveStart('character', -input.value.length);
		return sel.text.length - selLen;
	}
}

function replaceAt(string, index, replace) {
	return string.substring(0, index) + replace + string.substring(index + 1);
}

$(document).ready(function() {
	/*datepicker*/
	$(document).on("click", ".daterangepicker td.available", function(){
		$(this).closest('.daterangepicker').remove();
	});
	$(document).on("click", ".form__item.date .icon-calendar", function(){
		if(!$(this).hasClass('active')){
			$(this).closest(".form__item").find("input").trigger("focus");
		}
	});

	$(document).on("input", '.form__item.date input', function(){
		var valueLength = $(this).val().replace(/_/g, '').length;

		// Если дата заполнена, то валидируем
		if(valueLength === 10) {
			if(!checkDate($(this).val())){
				$(this).val("");
			} else if($(this).attr("data-mask") == "date-from" && $(this).attr("data-type") == "travel"){
				// Валидация даты вылета
				validateTravelDateStart($(this), 'input');
			} else if($(this).attr("data-mask") == "date-to" && $(this).attr("data-type") == "travel"){
				// Валидация даты обратного вылета
				validateTravelDateBack($(this), 'input');
			}
		}
	});
	$(document).on("focusout", '.form__item.date input', function(){
		var input = $(this);
		$(this).closest(".form__item").find(".icon-calendar").removeClass('active');
		
		if(!checkDate($(this).val())){
			$(this).val("");
		} else if($(this).attr("data-mask") == "date-from" && $(this).attr("data-type") == "travel"){
			// Валидация даты вылета
			validateTravelDateStart(input);
		} else if($(this).attr("data-mask") == "date-to" && $(this).attr("data-type") == "travel"){
			// Валидация даты обратного вылета
			validateTravelDateBack(input);
		}

		// input.trigger("change");
	});

	$(document).on("focus", ".form__item.date:not(.date--no_picker) input", function() {
		var date_icon = $(this).closest('.form__item').find(".icon-calendar");
		if (!date_icon.hasClass("active")) {
			date_icon.addClass("active");
			var input = $(this);
			input.closest('.form__item').removeClass('error');
			var dropPos = "down";
			if(input.attr("data-position") == "up"){
				dropPos = "up";
			}

			input.on("hide.daterangepicker", function() {
				input.closest(".scroll").perfectScrollbar("update");
			});

			var setInputValue = true;
			if(input.attr("data-setInputValue") == "false"){
				setInputValue = false;
			}

			if (input.attr("data-mask") == "birthday-adult") { //Совершеннолетний
				var phpTime = $("input[name=timePhp]").val().split(".");
				var birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				birthday_date.setFullYear(birthday_date.getFullYear() - bithdayMaxYears);

				if(input.attr("data-max-year")){
					var minval = parseInt(input.attr("data-max-year"));
					birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					birthday_date.setFullYear(birthday_date.getFullYear() - minval);
					birthday_date.setDate(birthday_date.getDate() + 1);
				}
				
				var adult_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				adult_date.setFullYear(adult_date.getFullYear() - 18);
				var startdate = new Date(adult_date.getFullYear(), adult_date.getMonth(), adult_date.getDate());
				startdate.setFullYear(startdate.getFullYear() - bithdayDefaultYears + 18);
				if(input.val() != ""){
					startdate = input.val();
				}

				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: birthday_date,
					maxDate: adult_date,
					startDate: startdate,
					autoApply: false,
					autoUpdateInput: false,
					opens: 'left',
					drops: dropPos,
					setInputValue: setInputValue,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if (input.attr("data-mask") == "birthday-not-adult") { //Несовершеннолетний
				var phpTime = $("input[name=timePhp]").val().split(".");
				var birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				birthday_date.setFullYear(birthday_date.getFullYear() - 18);
				birthday_date.setDate(birthday_date.getDate() + 1);
				var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var startdate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
				if(input.val() != ""){
					startdate = input.val();
				}
				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: birthday_date,
					maxDate: today,
					startDate: startdate,
					autoApply: false,
					autoUpdateInput: false,
					setInputValue: setInputValue,
					opens: 'left',
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if (input.attr("data-mask") == "birthday") { //Дата рождения от сегодняшнего дня
				var phpTime = $("input[name=timePhp]").val().split(".");
				var birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				birthday_date.setFullYear(birthday_date.getFullYear() - bithdayMaxYears);
				if(input.attr("data-max-year")){
					var minval = parseInt(input.attr("data-max-year"));
					birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					birthday_date.setFullYear(birthday_date.getFullYear() - minval);
					birthday_date.setDate(birthday_date.getDate() + 1);
				}

				var maxDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				if(input.attr("data-min-year")){
					var minval = parseInt(input.attr("data-min-year"));
					maxDate.setFullYear(maxDate.getFullYear() - parseInt(minval));
				}


				var startdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				startdate.setFullYear(startdate.getFullYear() - bithdayDefaultYears);
				if(input.val() != ""){
					startdate = input.val();
				}
				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: birthday_date,
					maxDate: maxDate,
					startDate: startdate,
					drops: dropPos,
					setInputValue: setInputValue,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if (input.attr("data-mask") == "past-date") { //Дата до сегодняшнего дня
				var phpTime = $("input[name=timePhp]").val().split(".");
				var date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				date.setFullYear(date.getFullYear() - bithdayMaxYears);
				if(input.attr("data-max-year")){
					var minval = parseInt(input.attr("data-max-year"));
					date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					date.setFullYear(date.getFullYear() - minval);
				}
				var startdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				if(input.val() != ""){
					startdate = input.val();
				}
				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: date,
					maxDate: new Date(phpTime[2], phpTime[1] - 1, phpTime[0]),
					startDate: startdate,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if (input.attr("data-mask") == "future-date") { //Дата с сегодняшнего дня
				var phpTime = $("input[name=timePhp]").val().split(".");
				var date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				date.setFullYear(date.getFullYear() - bithdayMaxYears);
				if(input.attr("data-max-year")){
					var minval = parseInt(input.attr("data-max-year"));
					date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					date.setFullYear(date.getFullYear() - minval);
				}
				var startdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				if(input.val() != ""){
					startdate = input.val();
				}
				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: startdate,
					// maxDate: new Date(phpTime[2], phpTime[1] - 1, phpTime[0]),
					startDate: startdate,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if (input.attr("data-mask") == "passport-date") { // Дата выдачи паспорта
				var item = input.attr("data-passport");
				var phpTime = $("input[name=timePhp]").val().split(".");
				var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				minDate.setFullYear(minDate.getFullYear() - 50);

				if($(".date-for-passport[data-passport="+ item +"]").length && $(".date-for-passport[data-passport="+ item +"]").val() != "" && $(".passport-type[data-passport="+ item +"]").val() != "5"){
					var birthday = $(".date-for-passport[data-passport="+ item +"]").val().split(".");
					var birthdayDate = new Date(birthday[2], birthday[1] - 1, birthday[0]);
					minDate = birthdayDate;
					var diffDate = yearsDiff(birthdayDate);
					if(diffDate >= 20 && diffDate < 45){
						minDate.setFullYear(minDate.getFullYear() + 20);
					} else if(diffDate >= 45){
						minDate.setFullYear(minDate.getFullYear() + 45);
					} else{
						minDate.setFullYear(minDate.getFullYear() + 14);
					}
				} else if($(".date-for-passport[data-passport="+ item +"]").length && $(".date-for-passport[data-passport="+ item +"]").val() != ""){
					var birthday = $(".date-for-passport[data-passport="+ item +"]").val().split(".");
					var birthdayDate = new Date(birthday[2], birthday[1] - 1, birthday[0]);
					minDate = birthdayDate;
				}

				var startdate = today;
				if(input.val() != ""){
					startdate = input.val();
				}

				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: minDate,
					maxDate: today,
					startDate: startdate,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if(input.attr("data-mask") == "date-from"){ //Дата от
				var item = input.attr("data-dateId");
				var dateTo_val = $(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val();
				var dateTo = dateTo_val.split(".");
				var phpTime = $("input[name=timePhp]").val().split(".");

				var startDate;
				var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var maxDate;

				if(input.attr("data-type") == "travel"){
					minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					maxDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);

					minDate.setDate(minDate.getDate() + 1);
					maxDate.setDate(minDate.getDate() + 365);
				}

				startDate = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate());
				if(input.val() != ""){
					startDate = input.val();
				}

				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: minDate,
					maxDate: maxDate,
					startDate: startDate,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					var dateFrom_val = chosen_date.format('DD.MM.YYYY');
					
					var dateFrom = dateFrom_val.split(".");
					dateFrom = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);

					var item = input.attr("data-dateId");
					var dateTo_val = $(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val();

					var dateTo = dateTo_val.split(".");
					dateTo = new Date(dateTo[2], dateTo[1] - 1, dateTo[0]);

					var days = (dateTo - dateFrom) / (1000*60*60*24);
					if(days < 1){
						$(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val("");
					}

					if(input.attr("data-type") == "travel"){
						if(days > 365){
							$(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val("");
						}
					}

					input.val(dateFrom_val).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			} else if(input.attr("data-mask") == "date-to"){ //Дата по
				var item = input.attr("data-dateId");
				var dateFrom_val = $(document).find("[data-mask=date-from][data-dateId='"+ item +"']").val();

				var dateFrom = dateFrom_val.split(".");
				var phpTime = $("input[name=timePhp]").val().split(".");

				var startDate;
				var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
				var maxDate;

				if(dateFrom != ""){
					minDate = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);
					minDate.setDate(minDate.getDate() + 1);
				} else{
					minDate.setDate(minDate.getDate() + 1);
				}

				if(input.attr("data-type") == "travel"){
					minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					maxDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
					minDate.setDate(minDate.getDate() + 1);

					if(dateFrom != ""){
						minDate = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);
						minDate.setDate(minDate.getDate() + 1);
						maxDate = new Date(minDate.getTime());
						maxDate.setDate(maxDate.getDate() + 364);
						
						var minDate2 = new Date(minDate);
						if($(document).find("[name=type][value=active]").is(":checked")){
							minDate2.setDate(minDate2.getDate() - 5);
						}
						if((maxDate.getTime() - minDate2.getTime()) / (1000 * 3600 * 24) + 1 >= 366){
							maxDate.setDate(maxDate.getDate() - ((maxDate.getTime() - minDate2.getTime()) / (1000 * 3600 * 24) + 1) + 365);
						}
					} else{
						minDate.setDate(minDate.getDate() + 1);
						maxDate.setDate(minDate.getDate() + 365);
					}
				}

				startDate = minDate;
				if(input.val() != ""){
					startDate = input.val();
				}

				var datepicker = input.daterangepicker({
					singleDatePicker: true,
					showDropdowns: true,
					minDate: minDate,
					maxDate: maxDate,
					startDate: startDate,
					autoApply: false,
					autoUpdateInput: false,
					parentEl: input.closest('.form__item'),
					"locale": {
						"format": "DD.MM.YYYY",
						"applyLabel": "Apply",
						"cancelLabel": "Cancel",
						"fromLabel": "From",
						"toLabel": "To",
						"weekLabel": "W",
						"daysOfWeek": [
							"Вс",
							"Пн",
							"Вт",
							"Ср",
							"Чт",
							"Пт",
							"Сб"
						],
						"monthNames": [
							"Январь",
							"Февраль",
							"Март",
							"Апрель",
							"Май",
							"Июнь",
							"Июль",
							"Август",
							"Сентябрь",
							"Октябрь",
							"Ноябрь",
							"Декабрь"
						],
						"firstDay": 1
					}
				}, function(chosen_date) {
					input.val(chosen_date.format('DD.MM.YYYY')).trigger('change');
					date_icon.removeClass("active");
					nextInput(input);
				});
			}
			input.bind('show.daterangepicker, showCalendar.daterangepicker', function(ev, picker) {
				var container = $(this).data("daterangepicker").container[0];

				var selects = $(container).find("select");

				if(($(this).attr("data-mask") == "date-from" || $(this).attr("data-mask") == "date-to") && $(this).attr("data-type") == "travel"){
					selects.select2({
						theme: "custom",
						minimumResultsForSearch: -1,
						dropdownCssClass: "dateSelect",
						containerCssClass: "dateSelectContainer",
						dropdownParent: $(container),
						templateResult: formatState
					}).on('select2:open', function () {
						setTimeout(function() {
							$(document).find(".select2-results__options").find(".ps__rail-x").remove();
							$(document).find(".select2-results__options").find(".ps__rail-y").remove();

							$(document).find(".select2-results__options").perfectScrollbar({
								suppressScrollX: true
							});
						}, 1);
					}).on('select2:selecting', function () {
						if($(this).hasClass('yearselect')){
							$(document).find(".monthselect").val(0).trigger('change.select2');
						}
					});
				} else{
					selects.select2({
						theme: "custom",
						minimumResultsForSearch: -1,
						dropdownCssClass: "dateSelect",
						containerCssClass: "dateSelectContainer",
						dropdownParent: $(container),
						templateResult: formatState
					}).on('select2:open', function () {
						setTimeout(function() {
							$(document).find(".select2-results__options").find(".ps__rail-x").remove();
							$(document).find(".select2-results__options").find(".ps__rail-y").remove();

							$(document).find(".select2-results__options").perfectScrollbar({
								suppressScrollX: true
							});
						}, 1);
					});
				}

				$(container).find("th.month").attr("colspan", "7");
			});
		} else{
			date_icon.removeClass("active");
		}
	});

	function formatState (state) {
		if (!state.id) {
			return state.text;
		}
		var $state = $(
			'<a>' + state.text + '</a>'
		);
		return $state;
	};
	
	/*datepicker END*/

	//numberSelect
	$(document).on("click", ".numberSelect--minus", function(){
		var select = $(this).closest('.numberSelect');
		var input = select.find("input");
		var textContainer = select.find(".numberSelect--text");
		var value = parseInt(select.attr("data-value")) || 1;
		var min = parseInt(select.attr("data-min"));
		var max = parseInt(select.attr("data-max"));
		var textArray = select.attr("data-text").split(",");


		if(value > min){
			value--;
			input.val(value).trigger('change');
		}
	});
	$(document).on("click", ".numberSelect--plus", function(){
		var select = $(this).closest('.numberSelect');
		var input = select.find("input");
		var textContainer = select.find(".numberSelect--text");
		var value = parseInt(select.attr("data-value")) || 1;
		var min = parseInt(select.attr("data-min"));
		var max = parseInt(select.attr("data-max"));
		var textArray = select.attr("data-text").split(",");

		if(value < max){
			value++;
			input.val(value).trigger('change');
		}
	});
	$(document).find(".numberSelect input").on("change", function(){
		var select = $(this).closest('.numberSelect');
		var textContainer = select.find(".numberSelect--text");
		var textArray = select.attr("data-text").split(",");
		select.attr("data-value", $(this).val());
		textContainer.html(declOfNum2($(this).val(), textArray));
	});

	//numberSelect END

	//select регионов
	$(document).on("focus", "input[data-mask=district]:not(.not-default)", function(){
		var parent = $(this).closest('.select');
		if(!parent.data("autocomleteReady")){
			var regions = [];
			var regionsHtml = '';
			$.getJSON("/local/include/city.json", function(data) {
				$.each(data.list, function(key, value) {
					if ($.inArray(value.region, regions) === -1) {
						regions.push(value.region);
						regionsHtml += "<li><a data-value='"+ value.region +"'>" + value.region + "</a></li>";
					}
				});
				parent.find(".select__body__container").find("ul").html(regionsHtml);
				parent.data("autocomleteReady", true);
				parent.find(".select__body__container").perfectScrollbar("update");

			});
		}
	});
	//select регионов END


	function selectOnClose(settings){
		var parent = $(this).closest(".select");
		var input = parent.children("input:visible");
		var selectValues = $(this).closest(".select").find(".select__body__container").find("ul");
		var $formItem = $(this).closest(".form__item");
		var $selectBody = parent.find(".select__body");
		var isDadataAddressInput = parent[0].hasAttribute("data-dadata-address-select") || parent[0].hasAttribute("data-dadata-fio-select");

		settings = typeof settings !== 'undefined' ? settings : {};
		settings.noClose = typeof settings.noClose !== 'undefined' ? settings.noClose : false;

		if(parent.hasClass("active")){
			var value = '';
			var newValue = '';
			var onlyOne = false;
			var maxValues = parseInt(input.attr("data-max"));
			var maxPreviewText = input.attr("data-max-preview-text");
			input.trigger('keyup');

			if(input.attr("data-multiple")){
				var values = input.val().split(",");
				var quantity = 0;

				if(!input.attr("data-showvalues")){
					values = [];
					parent.find("input[type=checkbox]:checked").each(function(){
						values.push($(this).attr('data-value'));
					});
					if(input.val()){
						values.push(input.val());
					} else{
						values.push("");
					}
				}

				$.each(values, function(index, value) {
					values[index] = $.trim(value);
					if($.trim(value)){
						quantity++;
					}
				});

				if(values[values.length - 1]){
					if(parent.find(".select__body").find("input[type=checkbox][data-value='"+ values[values.length - 1] +"']").hasClass('onlyOne')){
						onlyOne = true;
					}

					if(input.closest('.select').find(".select__body").find("input[type=checkbox][data-value='"+ values[values.length - 1] +"']").length){
						newValue = input.closest('.select').find(".select__body").find("input[type=checkbox][data-value='"+ values[values.length - 1] +"']").attr("data-value");
					}
				}

				if(!onlyOne && quantity > 1){
					$.each(values, function(index, value) {
						if(value){
							if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").hasClass("onlyOne")){
								values.splice(values.indexOf(value), 1);
							}
						}
					});
				}

				if(values && newValue && values.indexOf(newValue) != -1){
					values.splice(values.indexOf(newValue), 1);
				}

				var lastValue = values[values.length - 1];

				if(values.length && values[0]){
					value = values.join(', ');
				}

				if(lastValue){
					value += ", ";
					value += newValue;
					if(onlyOne){
						value = newValue;
					}
				} else{
					value += newValue;
				}
			} else{
				if(input.val() != ""){
					if(parent.find(".select__body").find("li:visible:first").find("a").attr("data-value")){
						newValue = parent.find(".select__body").find("li:visible:first").find("a").attr("data-value");
					} else{
						newValue = parent.find(".select__body").find("li:visible:first").find("a").text();
					}
					value += newValue;
				}
			}

			//Окончательная проверка
			var values = value.split(",");
			$.each(values, function(index, value) {
				values[index] = $.trim(value);
			});

			var values2 = [];
			selectValues.find(".active").removeClass('active');

			for(var i = 0; i < values.length; i++){
				var value = values[i];
				var j = i;
				if(value){
					value = $.trim(value);
					if(input.attr("data-multiple")){
						if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").length){
							values2.push(value);
						} else if (selectValues.find("input[type=checkbox][data-value^='"+ value +"']").length){
							j = j + 1;
							while(values[j]){
								value = value + ", " + values[j];
								if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").length){
									values2.push(value);
									i = j;
									break;
								} else if(selectValues.find("input[type=checkbox][data-value^='"+ value +"']").length){
									j++;
								} else{
									break;
								}
							}
						}
					} else{
						if(selectValues.find("a[data-value='"+ value +"']").length){
							values2.push(value);
							selectValues.find("a[data-value='"+ value +"']").closest('li').addClass("active");
							if(selectValues.find("a[data-value='"+ value +"']").attr("data-hidden-inputes")){
								var item = selectValues.find("a[data-value='"+ value +"']");
								var nameInputes = item.attr("data-hidden-inputes").split(",");
								$.each(nameInputes, function(index, el){
									var value = item.attr("data-" + el);
									$(document).find("[name="+ el +"]").val(value);
								});
							}
						}
					}
				}
			}
			value = values2.join(', ');

			if(maxValues && value.split(",").length > maxValues){
				if(input.attr("data-max-preview")) {
					$formItem.find(".select__tags").html('<a href="/" class="select__tag" data-popup3="selected-countries"><span>Выбрано: '+values2.length+" "+declOfNum(values2.length, maxPreviewText.split(","))+'<span><i class="select__tag_edit icon-edit2"><span class="path1"></span><span class="path2"></span></i></span></span></a>');
				} else {
					if(input.attr("data-multiple")){
						value = input.closest('.select').find(".select__body").find("input[type=checkbox].allValues").attr("data-value");
					} else{
						value = input.closest('.select').find(".select__body").find("a.allValues").attr("data-value");
					}
					values2  = [value];
				}
			}

			if(input.attr("data-multiple")){
				parent.find(".select__body").find("input[type=checkbox]:checked").prop("checked", false);

				if(values2.length) {
					// Плейсхолдер, когда выбрано значение
					if(input.attr("data-selected-text")) {
						input.attr("placeholder", input.attr("data-selected-text"));
					}
				}

				if(values2.length > 1 && (input.attr("data-text1") && input.attr("data-text2") && !input.attr("data-showvalues"))){
					input.attr("placeholder", declOfNum(values2.length, input.attr("data-text1").split(",")) + " " + values2.length + " " + declOfNum(values2.length, input.attr("data-text2").split(",")));
					input.val("");
					if(parent.find(".select--fake").length){
						parent.find(".select--fake").html(declOfNum(values2.length, input.attr("data-text1").split(",")) + " " + values2.length + " " + declOfNum(values2.length, input.attr("data-text2").split(",")));
						selectTooltipPos();
					}
				} else if(values2.length){
					if(input.attr("data-showvalues")){
						input.val(value);
					} else{
						// Если нет вывода тегов, то показывается плейсхолдер
						if(!input.attr("data-tagsvalues")) {
							input.attr("placeholder", declOfNum(values2.length, input.attr("data-text1").split(",")) + " " + values2.length + " " + declOfNum(values2.length, input.attr("data-text2").split(",")));
							input.val("");
						}
					}

					if(parent.find(".select--fake").length){
						parent.find(".select--fake").html(value);
						selectTooltipPos();
					}
				} else{
					if(input.attr("data-default")){
						input.attr("placeholder", input.attr("data-default"));
					}
					if(parent.find(".select--fake").length){
						parent.find(".select--fake").html(input.attr("data-default"));
						selectTooltipPos();
					}
				}

				parent.find(".select__body").find("input[type=checkbox]").each(function(){
					if($(this).attr("data-tooltip")){
						var tooltip = $(this).attr("data-tooltip");
						$(document).find("[data-tooltipster='"+ tooltip +"']").hide().tooltipster("hide");
					}
					if($(this).attr("data-open-block")){
						var block = $(this).attr("data-open-block");
						$(document).find("[data-opened-block='"+ block +"']").stop().slideUp(300);
					}
				});

				if(input.attr("data-selectvalues")){
					var block = input.attr("data-selectvalues");
					$(document).find("[data-selectedvalues]").find(".selectedValues").find("a").remove();
				}

				$.each(values2, function(index, value) {
					parent.find(".select__body").find("input[type=checkbox][data-value='"+ value +"']").prop("checked", true);

					if(input.attr("data-selectvalues")){
						var block = input.attr("data-selectvalues");
						$(document).find("[data-selectedvalues='"+ block +"']").find(".selectedValues").append('<a data-value="'+ value +'">'+ value +'</a>');
					}

					if(parent.find(".select__body").find("input[type=checkbox][data-value='"+ value +"']").attr("data-tooltip")){
						var tooltip = parent.find(".select__body").find("input[type=checkbox][data-value='"+ value +"']").attr("data-tooltip");
						$(document).find("[data-tooltipster="+ tooltip +"]").show().tooltipster("open");
					}

					if(parent.find(".select__body").find("input[type=checkbox][data-value='"+ value +"']").attr("data-open-block")){
						var block = parent.find(".select__body").find("input[type=checkbox][data-value='"+ value +"']").attr("data-open-block");
						$(document).find("[data-opened-block='"+ block +"']").stop().slideDown(300);
					}
				});

				if (input.attr("name") == "countries" && input.closest('form').attr("name") == "travel" && typeof(countryChanged) === "function") {
					countryChanged(selectValues.find("input[type=checkbox]:first"));
				}
			} else{
				if(!isDadataAddressInput) {
					input.val(value);
				} else {
					$selectBody.hide();
				}
			}
			//Окончательная проверка END

			if(input.attr("data-selectvalues")){
				var block = input.attr("data-selectvalues");
				if(!$(document).find("[data-selectedvalues]").find(".selectedValues").find("a").length){
					$(document).find("[data-selectedvalues='"+ block +"']").closest('.selectedValuesContainer').slideUp(300);
				} else{
					$(document).find("[data-selectedvalues='"+ block +"']").closest('.selectedValuesContainer').slideDown(300);
				}
			}

			input.trigger("change");
			input.data("prev-value", value);

			input.closest(".form__item").removeClass("error");

			parent.find(".ui-state-active").removeClass('ui-state-active');

			if(settings.noClose != true) {
				parent.removeClass("active");
			}

			validate(input);
		} else{
			input.trigger("focus");
		}
	}

	//select дублирование поля
	$(document).on("change", ".select [data-duplicateinput]", function() {
		selectOnClose.call(this, {
			noClose: true
		});
	});
	//select дублирование поля END

	//select
	$(document).on("click", ".select--open", function() {
		selectOnClose.call(this);
	});

	$(window).resize(function(event) {
		selectTooltipPos();
	});

	function selectTooltipPos(){
		$(document).find(".select").find(".select--fake").each(function(){
			var parent = $(this).closest('.select');
			if(parent.find(".select--fake").outerWidth() + 10 < parent.outerWidth() - 50){
				parent.find(".select--tooltip").css("right", "initial");
				parent.find(".select--tooltip").css("left", parent.find(".select--fake").outerWidth() + 10 + "px");
			} else{
				parent.find(".select--tooltip").css("left", "initial");
				parent.find(".select--tooltip").css("right", "35px");
			}
		});
	}

	// Клик по крестику тега в селекте
	$(document).on("click", ".select__tag_cross", function() {
		var $select = $(this).closest(".select");
		var $selectInput = $select.children("input");
		var $selectFake = $select.find(".select--fake");
		var $tag = $(this).closest(".select__tag");
		var value = $.trim($tag.text());
		
		$select.find(".select__body__container").find("input[type=checkbox][data-value='"+value+"']").prop("checked", false).trigger("change");
		$tag.remove();

		if($selectFake.length) {
			var value = $selectInput.val();
			$selectFake.html(value);
			selectTooltipPos();
		}
	});

	$(document).on("focus", ".select>input", function(){
		var $select = $(this).closest(".select");
		var $formItem = $(this).closest(".form__item");
		var input = this;
		
		$select.find(".select--tooltip").hide().tooltipster("hide");

		// Множественный ли селект
		if($(this).attr("data-multiple")){
			var values = [];
			$select.find(".select__body__container").find("input[type=checkbox]:checked").each(function(){
				values.push($(this).attr("data-value"));
			});

			// Показывать ли значения при фокусе
			if($(this).attr("data-showvalues")){
				$(this).val(values.join(", "));

				// Выводить ли значения тегами
				if($(this).attr("data-tagsvalues")){
					var $tags = $("<div class='select__tags'></div>");
					var tagsList = ""; 

					$(values).each(function() {
						tagsList += "<div class='select__tag'><span>"+this+"<span><i class='select__tag_cross icon-close'></i></div>";
					});
					if($formItem.find(".select__tags").length) {
						$formItem.find(".select__tags").html(tagsList);
					} else {
						$tags.html(tagsList);
						$formItem.append($tags);
					}
				}
			}

			if($(this).val()){
				$(this).val($(this).val() + ", ");
				setTimeout(function(){
					input.selectionStart = input.value.length;
					input.scrollLeft = input.scrollWidth;
				}, 0);
			}
		}
		$select.find("a.ui-state-active").removeClass('ui-state-active');
		$select.find(".select__body__container").find("li").show();
		$select.addClass("active");
		$select.find(".select__body__container").perfectScrollbar("update");
	});
	$(document).on("click", ".select .select__body a", function(){
		var selectValues = $(this).closest(".select").find(".select__body__container").find("ul");
		var input = $(this).closest('.select').children("input:visible");
		var value = '';
		var newValue = '';
		var onlyOne = false;
		var maxValues = parseInt(input.attr("data-max"));
		var maxPreviewText = input.attr("data-max-preview-text");
		if($(this).hasClass('onlyOne')){
			onlyOne = true;
		}
		if($(this).attr("data-value")){
			newValue = $(this).attr("data-value");
		} else{
			newValue = $(this).text();
		}
		if(input.attr("data-multiple")){
			var values = input.val().split(",");
			$.each(values, function(index, value) {
				values[index] = $.trim(value);
			});
			if(!onlyOne){
				$.each(values, function(index, value) {
					if(value){
						if(selectValues.find("a[data-value='"+ value +"']").hasClass("onlyOne")){
							values.splice(values.indexOf(value), 1);
						}
					}
				});
			}
			if(values && values.indexOf(newValue) != -1){
				values.splice(values.indexOf(newValue), 1);
			}
			values.pop();
			if(values.length && values[0]){
				value = values.join(', ');
			}
			if(newValue){
				if(values.length && values[0]){
					value += ", ";
				}
				value += newValue;
			}
			if(onlyOne){
				value = newValue;
			}
		} else{
			value += newValue;
		}

		if(maxValues && value.split(",").length > maxValues){
			var splitedValue = value.split(",");
			if(input.attr("data-max-preview")) {
				$formItem.find(".select__tags").html('<a href="/" class="select__tag" data-popup3="selected-countries"><span>Выбрано: '+splitedValue.length+" "+declOfNum(splitedValue.length, maxPreviewText.split(","))+'<span><i class="select__tag_edit icon-edit2"><span class="path1"></span><span class="path2"></span></i></span></span></a>');
			} else {
				value = input.closest('.select').find(".select__body").find("a.allValues").attr("data-value");
			}
		}

		selectValues.find(".active").removeClass('active');
		$.each(value.split(","), function(index, el) {
			var item = $.trim(el);
			selectValues.find("a[data-value='"+ item +"']").closest('li').addClass("active");

			if(selectValues.find("a[data-value='"+ item +"']").attr("data-hidden-inputes")){
				var item = selectValues.find("a[data-value='"+ item +"']");
				var nameInputes = item.attr("data-hidden-inputes").split(",");
				$.each(nameInputes, function(index, el){
					var value = item.attr("data-" + el);
					$(document).find("[name="+ el +"]").val(value);
				});
			}
		});

		input.data("prev-value", input.val());
		input.closest(".form__item").removeClass("error");

		$(this).closest(".select").find(".ui-state-active").removeClass('ui-state-active');
		$(this).closest(".select").removeClass("active");
		input.val(value).trigger("change");
		validate(input);
		return false;
	});
	$(document).on("change", ".select .select__body input[type=checkbox]", function(){
		var $formItem = $(this).closest(".form__item");
		var $select = $(this).closest(".select");
		var selectValues = $select.find(".select__body__container").find("ul");
		var input = $select.children("input:visible");
		var value = '';
		var maxValues = parseInt(input.attr("data-max"));
		var $this = this;
		var maxPreviewText = input.attr("data-max-preview-text");

		if($(this).hasClass('onlyOne') && $(this).is(":checked")){
			selectValues.find("input[type=checkbox]:checked").prop("checked", false);
			$(this).prop("checked", true);

			if($(this).attr("data-value")){
				value = $(this).attr("data-value") + ", ";
			} else{
				value = $(this).closest("li").find(".styleCheckbox__content").text() + ", ";
			}

			// Выводить ли значения тегами
			if(input.attr("data-tagsvalues")){
				var $tags = $("<div class='select__tags'></div>");
				var tagsList = "<div class='select__tag'><span>"+$(this).attr("data-value")+"<span><i class='select__tag_cross icon-close'></i></div>";
				
				if($formItem.find(".select__tags").length) {
					$formItem.find(".select__tags").html(tagsList);
				} else {
					$tags.html(tagsList);
					$formItem.append($tags);
				}
			}
		} else if($(this).hasClass('onlyOne')){
			selectValues.find("input[type=checkbox]:checked").prop("checked", false);
			value = '';
		} else{
			var prevValues = [];

			selectValues.find("input[type=checkbox]:checked").each(function(index, el) {
				if(el != $this){
					if($(this).attr("data-value")){
						prevValues.push($(this).attr("data-value"));
					} else{
						prevValues.push($(this).closest("li").find(".styleCheckbox__content").text());
					}
				}
			});

			$.each(prevValues, function(index, value) {
				if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").hasClass("onlyOne")){
					selectValues.find("input[type=checkbox][data-value='"+ value +"']").prop("checked", false);
				}
			});

			var values = [];

			selectValues.find("input[type=checkbox]:checked").each(function(index, el) {
				if($(this).attr("data-value")){
					values.push($(this).attr("data-value"));
				} else{
					values.push($(this).closest("li").find(".styleCheckbox__content").text());
				}
			});

			if(values.length > maxValues){
				// Показываем ли превью, если выбрано максимальное кол-во
				if(input.attr("data-max-preview")) {
					$formItem.find(".select__tags").html('<a href="/" class="select__tag" data-popup3="selected-countries"><span>Выбрано: '+values.length+" "+declOfNum(values.length, maxPreviewText.split(","))+'<span><i class="select__tag_edit icon-edit2"><span class="path1"></span><span class="path2"></span></i></span></span></a>');
				}

				values = [selectValues.find("input[type=checkbox].allValues").attr("data-value")];
				selectValues.find("input[type=checkbox]:checked").prop("checked", false);
				selectValues.find("input[type=checkbox].allValues").prop("checked", true);
			}

			value = values.join(", ") + ", ";
		}

		if(input.attr("data-default")){
			input.attr("placeholder", input.attr("data-default"));
		}
		// Множественный ли селект
		if(input.attr("data-showvalues") || input.attr("data-tagsvalues")){
			input.val(value).trigger('change');
			
			// Выводить ли значения тегами
			if(input.attr("data-tagsvalues")){
				var $tags = $("<div class='select__tags'></div>");
				var tagsList = ""; 
				if(values) {
					$(values).each(function() {
						tagsList += "<div class='select__tag'><span>"+this+"<span><i class='select__tag_cross icon-close'></i></div>";
					});
					if($formItem.find(".select__tags").length) {
						$formItem.find(".select__tags").html(tagsList);
					} else {
						$tags.html(tagsList);
						$formItem.append($tags);
					}
				}
			}
		} else{
			input.val("").trigger('change');
		}
		input.data("prev-value", input.val());

		if(input.attr("data-close") != "false"){
			input.trigger("keyup");
			if($(this).is(":checked")){
				$select.find(".select--open").trigger('click');
				nextInput($select.children('input'));
			}
		}

		// Если страны выбраны, скрываем form__item__offers
		if(values != undefined && values.length) {
			$formItem.find(".form__item__offers").hide();
		} else {
			$formItem.find(".form__item__offers").show();
		}

		$select.find(".ui-state-active").removeClass('ui-state-active');
	});

	$(document).on("keyup", ".select>input", function(e){
		if($(this).data("prev-value") && $(this).val().length < $(this).data("prev-value").length && $(this).attr("data-multiple")){
			if($(this).val()[$(this).val().length - 1] == ","){
				$(this).val($(this).val().substring(0, $(this).val().length - 1));
			}
		}
		if($(this).attr("data-mask") == "textcyr2"){
			this.value = autolayout(this.value);
			this.value = this.value.replace(/[^а-яёЁА-Я ]/gim, '');
		}
		if($(this).attr("data-mask") == "district"){
			this.value = autolayout(this.value);
			this.value = this.value.replace(/[^а-яёЁА-Я-() ]/gim, '');
		}
		if($(this).attr("data-mask") == "countries"){
			this.value = autolayout(this.value);
			this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/\s\,/g, ',').replace(/^\-?/, "").replace(/\-?$/, "").replace(/[^а-яА-Я\-,() ]/gim, '');
		}
		// Вариант без точек и запятых
		if($(this).attr("data-mask") == "countries2"){
			var cursorPos = $(this).getCursorPosition();
			if(this.value[cursorPos - 1] == ',') {
				this.value = replaceAt(this.value, cursorPos - 1, 'б');
			}
			this.value = this.value.replace('[', 'х').replace('{', 'Х');
			this.value = autolayout(this.value);
			this.value = this.value.replace('[', 'х').replace('{', 'Х').replace(/\s{2,}/g, ' ').replace('.', 'ю').replace('<', 'Б').replace('>', 'Ю').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/\s\,/g, ',').replace(/^\-?/, "").replace(/\-?$/, "").replace(/[^а-яА-Я\-,() ]/gim, '');
		}

		var selectValues = $(this).closest(".select").find(".select__body__container").find("ul");
		var input = $(this);
		var value = $(this).val();
		var onlyOne = false;
		var onlyOneValue = "";
		var maxValues = parseInt($(this).attr("data-max"));
		var lastCharSpace = (value && value.substr(-1) == ' ')? " ": "";
		var $formItem = $(this).closest(".form__item");
		var maxPreviewText = input.attr("data-max-preview-text");

		var values = $(this).val().split(",");
		$.each(values, function(index, value) {
			value = $.trim(value);
			if(input.attr("data-first-char-upper") == "true" && value.length != 0){
				value = value[0].toUpperCase() + value.slice(1);
			}

			values[index] = value;
		});

		if(values.length > 1){
			var lastValue = values.pop();

			var values2 = [];
			$.each(values, function(index, value) {
				if(value){
					value = $.trim(value);
					if(input.attr("data-multiple")){
						if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").length){
							if(values2.indexOf(value) == -1){
								values2.push(value);
							}
							if(selectValues.find("input[type=checkbox][data-value='"+ value +"']").hasClass("onlyOne")){
								onlyOne = true;
								onlyOneValue = value;
							}
						}
					} else{
						if(!selectValues.find("a[data-value='"+ value +"']").length){
							selectValues.find("a").each(function(index, el) {
								if(!$(this).closest(".select")[0].hasAttribute("data-dadata-address-select") && $(this).text().toLowerCase().indexOf(value.toLowerCase()) + 1) {
									value = $(this).attr("data-value");
									if(values2.indexOf(value) == -1){
										values2.push(value);
									}
									if(selectValues.find("a[data-value='"+ value +"']").hasClass("onlyOne")){
										onlyOne = true;
										onlyOneValue = value;
									}
								}
							});
						} else{
							if(values2.indexOf(value) == -1){
								values2.push(value);
							}
							if(selectValues.find("a[data-value='"+ value +"']").hasClass("onlyOne")){
								onlyOne = true;
								onlyOneValue = value;
							}
						}
					}
				}
			});

			if(input.attr("data-multiple")){
				if(selectValues.find("input[type=checkbox][data-value='"+ values2[values2.length - 1] +"']").hasClass("onlyOne")){
					values2 = [values2[values2.length - 1]];
				} else if(onlyOne){
					values2.splice(values2.indexOf(onlyOneValue), 1);
				}

				if(maxValues && values2.length > maxValues){
					if(input.attr("data-max-preview")) {
						$formItem.find(".select__tags").html('<a href="/" class="select__tag" data-popup3="selected-countries"><span>Выбрано: '+values2.length+" "+declOfNum(values2.length, maxPreviewText.split(","))+'<span><i class="select__tag_edit icon-edit2"><span class="path1"></span><span class="path2"></span></i></span></span></a>');
					}
					values2 = [];
					values2.push($(this).closest('.select').find(".select__body").find("input[type=checkbox].allValues").attr("data-value"));
				}
				
				selectValues.find("input[type=checkbox]:checked").prop("checked", false);
				$.each(values2, function(index, value) {
					selectValues.find("input[type=checkbox][data-value='"+ value +"']").prop("checked", true);
				});

				if ($(this).attr("name") == "countries" && $(this).closest('form').attr("name") == "travel" && typeof(countryChanged) === "function" && typeof input.data("prev-multiple-values") != "undefined" && !compareArray(input.data("prev-multiple-values"), values2)) {
					countryChanged(selectValues.find("input[type=checkbox]:first"));
				}

				input.data("prev-multiple-values", values2);
			} else{
				if(selectValues.find("a[data-value='"+ values2[values2.length - 1] +"']").hasClass("onlyOne")){
					values2 = [values2[values2.length - 1]];
				} else if(onlyOne){
					values2.splice(values2.indexOf(onlyOneValue), 1);
				}

				if(maxValues && values2.length > maxValues){
					if(input.attr("data-max-preview")) {
						$formItem.find(".select__tags").html('<a href="/" class="select__tag" data-popup3="selected-countries"><span>Выбрано: '+values2.length+" "+declOfNum(values2.length, maxPreviewText.split(","))+'<span><i class="select__tag_edit icon-edit2"><span class="path1"></span><span class="path2"></span></i></span></span></a>');
					} else {
						values2 = [];
						values2.push($(this).closest('.select').find(".select__body").find("a.allValues").attr("data-value"));
					}
				}
			}

			values2.push(lastValue);

			value = values2.join(', ') + lastCharSpace;
		} else{
			value = values[0] + lastCharSpace;
		}

		if(!$(this).closest(".select")[0].hasAttribute("data-dadata-address-select")) {
			$(this).val(value);
		}

		if($(this).attr("data-multiple")){
			value = $(this).val().split(",");
			value = value.pop();
			value = $.trim(value);
		}
		var countItems = $(this).closest('.select').find(".select__body").find("li").length;
		var hidedItems = 0;
		if(!$(this).closest(".select")[0].hasAttribute("data-dadata-address-select")) {
			$(this).closest('.select').find("a.ui-state-active").removeClass('ui-state-active');
			$(this).closest('.select').find(".select__body").find("li").each(function(){
				
				if(input.attr("data-multiple")){
					if(value && !($(this).find(".styleCheckbox__content").text().toLowerCase().indexOf(value.toLowerCase()) + 1)) {
						$(this).hide();
						hidedItems++;
					} else{
						$(this).show();
					}
				} else{
					if(!($(this).find("a").text().toLowerCase().indexOf(value.toLowerCase()) + 1)) {
						$(this).hide();
						hidedItems++;
					} else{
						$(this).show();
					}
				}
			});
		}

		if(hidedItems == countItems){
			$(this).closest('.select').removeClass("active");
		} else{
			if(!input.attr("data-tagsvalues")) {
				$(this).closest('.select').addClass("active");
			}
		}
		$(this).closest('.select').find(".select__body__container").perfectScrollbar("update");

		if($(this).attr("data-default")){
			var defaultText = $(this).attr("data-default");
			$(this).attr("placeholder", defaultText);
		}

		$(this).data("prev-value", $(this).val());
	});

	$(document).on("keydown", ".select input", function(e){
		var input = $(this);
		if(!$(this).attr("data-multiple")){
			if(e.which == 40){
				if(!$(this).closest('.select').find(".select__body").find("a.ui-state-active").length){
					$(this).closest('.select').find(".select__body").find("li:first-child").find("a").addClass("ui-state-active");
				} else{
					if(!$(this).closest('.select').find(".select__body").find("a.ui-state-active").closest('li').next("li").length){
						$(this).closest('.select').find(".select__body").find("a.ui-state-active").removeClass('ui-state-active');
						$(this).closest('.select').find(".select__body").find("li:first-child").find("a").addClass("ui-state-active");
					} else{
						$(this).closest('.select').find(".select__body").find("a.ui-state-active").removeClass('ui-state-active').closest('li').next("li").find("a").addClass("ui-state-active");
					}
				}
			}
			if(e.which == 38){
				if(!$(this).closest('.select').find(".select__body").find("a.ui-state-active").length){
					$(this).closest('.select').find(".select__body").find("li:last-child").find("a").addClass("ui-state-active");
				} else{
					if(!$(this).closest('.select').find(".select__body").find("a.ui-state-active").closest('li').prev("li").length){
						$(this).closest('.select').find(".select__body").find("a.ui-state-active").removeClass('ui-state-active');
						$(this).closest('.select').find(".select__body").find("li:last-child").find("a").addClass("ui-state-active");
					} else{
						$(this).closest('.select').find(".select__body").find("a.ui-state-active").removeClass('ui-state-active').closest('li').prev("li").find("a").addClass("ui-state-active");
					}
				}
			}
			if(e.which == 13){
				if($(this).closest('.select').find(".select__body").find("a.ui-state-active").length){
					$(this).closest('.select').find(".select__body").find("a.ui-state-active").trigger("click");
				} else if($(this).val() != ""){
					$(this).closest('.select').find(".select__body").find("li:visible:first").find("a").trigger('click');
					$(this).closest('.select').find(".select__body").find("li:visible:first").find("input[type=checkbox]").trigger('click');
				}
			}
		} else{
			if(e.which == 13){
				if($(this).val() != ""){
					$(this).closest('.select').find(".select__body").find("li:visible:first").find("input[type=checkbox]").prop("checked", false).trigger('click');
					$(this).closest('.select').find(".select--open").trigger("click");
					setTimeout(function(){
						input.closest('.select').removeClass('active');
					});					
				}
			}
			if(e.which == 9){
				if($(this).val() != "" && $(this).val().split(",").length < 2){
					$(this).closest('.select').find(".select__body").find("li:visible:first").find("input[type=checkbox]").prop("checked", false).trigger('click');
					$(this).closest('.select').find(".select--open").trigger("click");
				}
				$(this).closest('.select').removeClass('active');
			}
		}
	});
	$(document).bind("mouseup touchend", function(e) {
		var div = $(document).find(".select.active");
		if (!div.is(e.target) && div.has(e.target).length === 0) {
			div.find(".select--open").trigger("click");
		}
	});

	$(document).on("focusout", ".select>input", function(e){
		if(!$(this).closest('.select').hasClass("active")){
			$(this).closest('.select').addClass('active');
			$(this).closest('.select').find(".select--open").trigger("click");
		}
	});
	//select END

	//select без инпута
	$(document).on("click", ".select2__header", function(){
		var parent = $(this).closest('.select2');
		parent.find('.select2__openSub.active').removeClass('active');
		parent.find('.select2__submenu').hide();
		if(parent.hasClass('active')){
			parent.find("a.ui-state-active").removeClass('ui-state-active');
			parent.removeClass("active");
			validate(parent.find("input"));
		} else{
			parent.find("a.ui-state-active").removeClass('ui-state-active');
			parent.addClass("active");
			parent.find("input").trigger('focus');
			$(this).closest('.select2').find(".select2__body__container").perfectScrollbar("update");
		}
	});
	$(document).on("click", ".select2 .select2__body a", function(){
		var parent = $(this).closest('.select2');
		var value = $(this).attr("data-value");
		var text = $(this).html();
		var oldValue = parent.find("input").val();

		// Если есть подменю, то показываем его
		if($(this).hasClass('select2__submenuLink')) {
			$(this).closest('li').find('.select2__submenu').slideToggle();
			$(this).closest('li').find('.select2__openSub').toggleClass('active');
		} else {
		// Иначе выбираем пункт
			if(oldValue != value){
				parent.find("input").val(value).trigger('change');
			}

			parent.find(".select2__body").find(".active:not(.select2__openSub)").removeClass('active');
			$(this).closest('li').addClass('active');

			parent.find(".select2__header--text").html(text);
			parent.addClass("noempty");

			parent.find("a.ui-state-active").removeClass('ui-state-active');
			parent.removeClass("active");
			validate(parent.find("input"));
		}

	});
	$(document).on("keyup", ".select2 input", function(e){
		var parent = $(this).closest('.select2');
		if(e.which == 40){
			if(!parent.find(".select2__body").find("a.ui-state-active").length){
				parent.find(".select2__body").find("li:first-child").find("a").addClass("ui-state-active");
			} else{
				if(!parent.find(".select2__body").find("a.ui-state-active").closest('li').next("li").length){
					parent.find(".select2__body").find("a.ui-state-active").removeClass('ui-state-active');
					parent.find(".select2__body").find("li:first-child").find("a").addClass("ui-state-active");
				} else{
					parent.find(".select2__body").find("a.ui-state-active").removeClass('ui-state-active').closest('li').next("li").find("a").addClass("ui-state-active");
				}
			}
		}
		if(e.which == 38){
			if(!parent.find(".select2__body").find("a.ui-state-active").length){
				parent.find(".select2__body").find("li:last-child").find("a").addClass("ui-state-active");
			} else{
				if(!parent.find(".select2__body").find("a.ui-state-active").closest('li').prev("li").length){
					parent.find(".select2__body").find("a.ui-state-active").removeClass('ui-state-active');
					parent.find(".select2__body").find("li:last-child").find("a").addClass("ui-state-active");
				} else{
					parent.find(".select2__body").find("a.ui-state-active").removeClass('ui-state-active').closest('li').prev("li").find("a").addClass("ui-state-active");
				}
			}
		}
		if(e.which == 13){
			parent.find(".select2__body").find("a.ui-state-active").trigger("click");
		}
	});
	$(document).bind("mouseup touchend", function(e) {
		var div = $(document).find(".select2.active");
		if (!div.is(e.target) && div.has(e.target).length === 0) {
			div.find("a.ui-state-active").removeClass('ui-state-active');
			div.removeClass("active");
			validate(div.find("input"));
		}
	});
	//select без инпута END

	//Предложения для inputa
	$(document).on("click", ".form__item__offers a", function(){
		var value = $(this).attr("data-value");
		var $select = $(this).closest(".select");
		if($select.length){
			$select.find("input[type=checkbox][data-value='"+ value +"']").trigger("click");
			$select.removeClass("active");
		}
	});
	//Предложения для inputa END

	//Только одно из полей обязательное
	$(document).on("change", "[data-onerequired]", function(){
		var requiredId = $(this).attr("data-onerequired");
		$(document).find("[data-onerequired='"+ requiredId +"']").addClass("required");
		if(validate($(this))){
			$(document).find("[data-onerequired='"+ requiredId +"']").removeClass('required');
		} else{
			var bool = false;
			$(document).find("[data-onerequired='"+ requiredId +"']").each(function(index, el) {
				if(validate($(this))){
					bool = true;
				}
			});
			if(bool){
				$(document).find("[data-onerequired='"+ requiredId +"']").removeClass('required');
			} else{
				$(document).find("[data-onerequired='"+ requiredId +"']").addClass('required');
			}
		}
		$(document).find("[data-onerequired='"+ requiredId +"']").each(function(index, el) {
			validate($(this));
		});
	});
	//Только одно из полей обязательное END

	/*Имя*/
	$(document).on('keyup keydown', 'input[data-mask=name]', function() {
		this.value = autolayoutNotSym(this.value);
		this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/[^а-яёЁА-Я\- ]/gim, '');

		var text = "";
		var space = !0;
		for (var i = 0; i < this.value.length; i++) {
			if (this.value[i] == " " || this.value[i] == "-") {
				space = !0;
				text += this.value[i]
			} else {
				if (space) {
					text += this.value[i].toUpperCase();
					space = !1
				} else {
					text += this.value[i].toLowerCase();
					space = !1
				}
			}
		}
		this.value = text;
	});
	$(document).on('focusout', 'input[data-mask=name]', function() {
		this.value = autolayoutNotSym(this.value);
		this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/\-?$/, "").replace(/[^а-яёЁА-Я\- ]/gim, '');

		var text = "";
		var space = !0;
		for (var i = 0; i < this.value.length; i++) {
			if (this.value[i] == " " || this.value[i] == "-") {
				space = !0;
				text += this.value[i]
			} else {
				if (space) {
					text += this.value[i].toUpperCase();
					space = !1
				} else {
					text += this.value[i].toLowerCase();
					space = !1
				}
			}
		}
		this.value = text;
	});
	/*Имя END*/

	/*Имя одиночная*/
	$(document).on('keyup keydown', 'input[data-mask=singlename]', function() {
		if($(this).attr("data-lang") == "latin"){
			this.value = autolayouttoeng(this.value);
			this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/[^a-zA-Z\- ]/gim, '');
		} else{
			this.value = autolayoutNotSym(this.value);
			this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/[^а-яёЁА-Я\- ]/gim, '');
		}

		var text = "";
		var space = !0;
		if($(this).attr("data-case") == "upper"){
			text = this.value.toUpperCase();
		} else{
			for (var i = 0; i < this.value.length; i++) {
				if (this.value[i] == " " || this.value[i] == "-") {
					space = !0;
					text += this.value[i]
				} else {
					if (space) {
						text += this.value[i].toUpperCase();
						space = !1
					} else {
						text += this.value[i].toLowerCase();
						space = !1
					}
				}
			}
		}
		this.value = text;
	});
	$(document).on('focusout', 'input[data-mask=singlename]', function() {
		if($(this).attr("data-lang") == "latin"){
			this.value = autolayouttoeng(this.value);
			this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/[^a-zA-Z\- ]/gim, '');
		} else{
			this.value = autolayoutNotSym(this.value);
			this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/^\-?/, "").replace(/[^а-яёЁА-Я\- ]/gim, '');
		}

		var text = "";
		var space = !0;
		if($(this).attr("data-case") == "upper"){
			text = this.value.toUpperCase();
		} else{
			for (var i = 0; i < this.value.length; i++) {
				if (this.value[i] == " " || this.value[i] == "-") {
					space = !0;
					text += this.value[i]
				} else {
					if (space) {
						text += this.value[i].toUpperCase();
						space = !1
					} else {
						text += this.value[i].toLowerCase();
						space = !1
					}
				}
			}
		}
		this.value = text;
	});
	/*Имя одиночная END*/

	/*Email*/
	$(document).on("focus", "[data-mask=email]", function() {
		if (!domains.length) {
			$.get('/local/include/ar/reg_domains/reg_domains.txt?' + Math.random(), function(data) {
				domains = JSON.parse(data);
			});
		}
	});
	$(document).on("focus", "[name=email]", function() {
		if (!domains.length) {
			$.get('/local/include/ar/reg_domains/reg_domains.txt?' + Math.random(), function(data) {
				domains = JSON.parse(data);
			});
		}
	});
	$(document).on('focusout', '[data-mask=email]', function() {
		$(this).closest(".form__item").removeClass("checked");
		$(this).val(autolayouttoeng($(this).val()));
		this.value = this.value.toLowerCase();
		$(this).val($(this).val().replace(/[^a-zA-Z0-9@!#$%&'*+-/=?_~.@\\]/gim, ''));
	});
	$(document).on('keyup keydown', '[data-mask=email]', function() {
		$(this).val(autolayouttoeng($(this).val()));
		$(this).val($(this).val().replace(/[^a-zA-Z0-9@!#$%&'*+-/=?_~.@\\]/gim, ''));
		$(this).closest(".form__item").removeClass("checked");
	});
	/*Email END*/

	/*Числа*/
	$(document).on('keyup keydown focusout', 'input[data-mask=number]', function() {
		this.value = this.value.replace(/[^0-9]/gim, '');
		if ($(this).val() <= 0) {
			$(this).val("");
		}
		var max = $(this).attr("data-max");
		if(parseInt($(this).val()) > parseInt(max)){
			$(this).val(max);
		}
	});
	/*Числа END*/

	/*Проценты*/
	$(document).on('focus', 'input[data-mask=percent]', function() {
		if($(this).attr("data-dec") == 0){
			this.value = this.value.replace(/[^0-9]/gim, '');
		} else{
			this.value = this.value.replace(/[^0-9.]/gim, '');
		}
	});
	$(document).on('keyup keydown focusout', 'input[data-mask=percent]', function() {
		if($(this).val() != ""){
			if($(this).attr("data-dec") == 0){
				this.value = this.value.replace(/[^0-9]/gim, '');
			} else{
				this.value = this.value.replace(/[^0-9.]/gim, '');
			}

			if ($(this).val() <= 0) {
				$(this).val("");
			}
			var max = $(this).attr("data-max");
			if(parseFloat($(this).val()) > parseFloat(max)){
				$(this).val(max);
			}
		}
	});
	$(document).on('focusout', 'input[data-mask=percent]', function() {
		if($(this).val() != ""){
			var dec = $(this).attr("data-dec");
			if(!dec){
				dec = 0;
			}
			if(dec == 0){
				this.value = parseFloat(this.value.replace(/[^0-9]/gim, '')).toFixed(dec) + "%";
			} else{
				this.value = parseFloat(this.value.replace(/[^0-9.]/gim, '')).toFixed(dec) + "%";
			}
		}
	});
	/*Проценты END*/

	/*Кириллица*/
	$(document).on('keyup keydown focusout input', 'input[data-mask=textcyr]', function() { //Все первые буквы большие
		this.value = autolayout(this.value);
		this.value = this.value.replace(/[^а-яёЁА-Я ]/gim, '');
		var text = "";
		var space = !0;
		for (var i = 0; i < this.value.length; i++) {
			if (this.value[i] == " " || this.value[i] == "-") {
				space = !0;
				text += this.value[i]
			} else {
				if (space) {
					text += this.value[i].toUpperCase();
					space = !1
				} else {
					text += this.value[i].toLowerCase();
					space = !1
				}
			}
		}
		this.value = text;
	});
	$(document).on('keyup keydown focusout input', 'input[data-mask=textcyr2]', function() { //Оставляем как есть
		this.value = autolayout(this.value);
		this.value = this.value.replace(/[^а-яёЁА-Я ]/gim, '');
	});
	$(document).on('keyup keydown focusout input', 'input[data-mask=textcyr3]', function() { //Все буквы большие
		this.value = autolayout(this.value);
		this.value = this.value.replace(/[^а-яёЁА-Я0-9\- ]/gim, '');
		this.value = this.value.toUpperCase();
	});
	/*Кириллица END*/

	// Текст
	$(document).on('keyup keydown input', 'input[data-mask=text]', function() {
		var min = $(this).attr("data-min");
		var max = $(this).attr("data-max");
		if($(this).val().length > max){
			$(this).val($(this).val().substring(0, max));
		}
	});
	$(document).on('focusout', 'input[data-mask=text]', function() {
		var min = $(this).attr("data-min");
		var max = $(this).attr("data-max");
		if($(this).val() == ""){
			if($(this).hasClass('required')){
				$(this).closest('.form__item').addClass("error");
				$(this).closest('.form__item').find(".validation-error").html("Обязательно");
			} else{
				$(this).closest('.form__item').removeClass("error");
			}
		} else if($(this).val().length < min){
			$(this).closest('.form__item').addClass("error");
			$(this).closest('.form__item').find(".validation-error").html("Минимальное количество символов - " + min);
		} else if($(this).val().length > max){
			$(this).closest('.form__item').addClass("error");
			$(this).closest('.form__item').find(".validation-error").html("Максимальное количество символов - " + max);
		} else{
			$(this).closest('.form__item').removeClass("error");
		}
	});
	// Текст END

	/*Регион*/
	$(document).on('keyup keydown focusout', 'input[data-mask=district]', function() { //Все первые буквы большие
		this.value = autolayout(this.value);
		this.value = this.value.replace(/[^а-яёЁА-Я\-() ]/gim, '');
		var text = "";
		var space = !0;
		for (var i = 0; i < this.value.length; i++) {
			if (this.value[i] == " " || this.value[i] == "-" || this.value[i] == "(") {
				space = !0;
				text += this.value[i]
			} else {
				if (space) {
					text += this.value[i].toUpperCase();
					space = !1
				} else {
					text += this.value[i].toLowerCase();
					space = !1
				}
			}
		}
		this.value = text;
	});
	/*Регион END*/

	/*Город*/
	$(document).on('keyup keydown focusout', 'input[data-mask=city]', function() { //Все первые буквы большие
		this.value = autolayout(this.value);
		this.value = this.value.replace(/[^а-яёЁА-Я-() ]/gim, '');
		this.value = this.value.charAt(0).toUpperCase() + this.value.substr(1).toLowerCase();
	});
	/*Город END*/

	/*Номер договора*/
	$('input[data-mask=dogovor]').on('keyup keydown focusout', function() {
		if (this.value.match(/[^0-9A-ZЁА-Я\-\/\\_#№+ ]/g)) {
			this.value = this.value.toUpperCase()
			this.value = this.value.replace(/[^0-9A-ZЁА-Я\-\/\\_#№+ ]/g, '')
		}
		if(/[^0-9A-ZЁА-Я]/.test(this.value[this.value.length-1]) && this.value.length > 4){
			if(this.value[this.value.length-1] == this.value[this.value.length-2] && this.value[this.value.length-1] == this.value[this.value.length-3] && this.value[this.value.length-1] == this.value[this.value.length-4]){
			   $(this).val($(this).val().substr(0,this.value.length - 1));
			}
		}
		if($(this).val().length > 24){
			$(this).val($(this).val().substr(0,24));
		}
	});
	/*Номер договора END*/

	/*Номер договора в оплате QR кодом*/
	$('input[data-mask=dogovor2]').on('keyup keydown focusout', function(e) {
		if (e.which === 32) {
			this.value = this.value.replace(/^\s+/, '');
			if (this.value.length === 0) {
				e.preventDefault();
			}
		}

		this.value = this.value.replace(/№/g, '').replace(/_/g, ' ');
	});
	/*Номер договора в оплате QR кодом END*/

	/*Сумма*/
	$('input[data-mask=sum]').on('keyup keydown', function() {
		if (this.value.match(/[^0-9.]/g)) {
			this.value = this.value.replace(",", ".");
			this.value = this.value.replace("-", ".");
			this.value = this.value.replace(/[^0-9.]/g, '')
		}
		var val = this.value.toString();
		if(val[val.length - 1] == '.' && val[val.length - 2] == '.'){
			this.value = val.substring(0, val.length - 1);
		}
	});
	$('input[data-mask=sum]').on('focus', function(){
		if (this.value.match(/[^0-9.]/g)) {
			this.value = this.value.replace(",", ".");
			this.value = this.value.replace("-", ".");
			this.value = this.value.replace(/[^0-9.]/g, '')
		}
		var val = this.value.toString();
	});
	$('input[data-mask=sum]').on('focusout', function(){
		var maxSum = parseInt($(this).attr("data-max"));
		if (this.value.match(/[^0-9.]/g)) {
			this.value = this.value.replace(",", ".");
			this.value = this.value.replace("-", ".");
			this.value = this.value.replace(/[^0-9.]/g, '')
		}
		if(Math.ceil(this.value) > maxSum){
			this.value = maxSum;
		}
		var val = this.value.toString();
		if(val[val.length - 1] == '.' && val[val.length - 2] == '.'){
			this.value = val.substring(0, val.length - 1);
		}
		if(this.value != "" && this.value == parseFloat(this.value)){
			this.value = parseFloat(this.value).toFixed(2);
			if(parseInt(this.value) == 0){
				this.value = '';
			}
		} else{
			this.value = '';
		}
		var num = this.value.replace(/\s/g, "");
		this.value = partitionNum(num);
	});

	$(document).on('keyup keydown', 'input[data-mask=sumint]', function() {
		if (this.value.match(/[^0-9 ]/g)) {
			this.value = this.value.replace(/[^0-9 ]/g, '')
		}
		var num = this.value.replace(/\s/g, "");
		if(num == 0){
			num = "";
		}
		if(num){
			num = parseInt(num);

			var max = $(this).attr("data-max");
			if(num > parseInt(max)){
				num = max;
			}
		}

		this.value = partitionNum(num);
		if (this.value[this.value.length - 1] == " ") {
			this.value = this.value.substr(0, this.value.length - 1)
		}
	});
	$(document).on('focusout', 'input[data-mask=sumint]', function() {
		if (this.value.match(/[^0-9 ]/g)) {
			this.value = this.value.replace(/[^0-9 ]/g, '')
		}
		var num = this.value.replace(/\s/g, "");
		if(num == 0){
			num = "";
		}
		if(num){
			num = parseInt(num);

			var max = $(this).attr("data-max");
			if(num > parseInt(max)){
				num = max;
			}
		}

		this.value = partitionNum(num);
		if (this.value[this.value.length - 1] == " ") {
			this.value = this.value.substr(0, this.value.length - 1)
		}
	});
	/*Сумма END*/

	// Паспорт
	$(document).on('keyup keydown focusout', 'input[data-mask=passport-foreign]', function() { //Иной тип документа
		if($(this).val().length > 20){
			$(this).val($(this).val().substring(0, 20));
		}
	});
	$(document).on("change", ".passport-type", function(){
		var item = $(this).attr("data-passport");
		var form = $(this).closest('form');
		if($(this).val() == "1"){
			form.find(".passport-seria[data-passport="+ item +"]").val("").prop("disabled", false);
			form.find(".passport-code[data-passport="+ item +"]").val("").prop("disabled", false);
			form.find(".passport-issued[data-passport="+ item +"]").val("").prop("disabled", false);
			form.find(".passport-number[data-passport="+ item +"]").val("").attr("data-mask", "passport-number").attr("placeholder", "Номер").inputmask({"mask":"999999"}).attr("type", "tel");
			form.find(".passport-id[data-passport="+ item +"]").val("").attr("data-mask", "passport-id").attr("placeholder", "Серия и номер документа").inputmask({"mask":"9999 999999"}).attr("type", "tel");

			form.find(".passport-seria[data-passport="+ item +"]").closest('.form__item').removeClass("error");
			form.find(".passport-number[data-passport="+ item +"]").closest('.form__item').removeClass("error");
			form.find(".passport-id[data-passport="+ item +"]").closest('.form__item').removeClass("error");
		} else if($(this).val() == "5"){
			form.find(".passport-seria[data-passport="+ item +"]").val("").prop("disabled", true);
			form.find(".passport-code[data-passport="+ item +"]").val("").prop("disabled", true);
			form.find(".passport-issued[data-passport="+ item +"]").val("").prop("disabled", true);
			form.find(".passport-number[data-passport="+ item +"]").val("").attr("data-mask", "passport-foreign").attr("placeholder", "Номер документа").inputmask('remove').attr("type", "text");
			form.find(".passport-id[data-passport="+ item +"]").val("").attr("data-mask", "passport-foreign").attr("placeholder", "Номер документа").inputmask('remove').attr("type", "text");

			form.find(".passport-seria[data-passport="+ item +"]").closest('.form__item').removeClass("error");
			form.find(".passport-number[data-passport="+ item +"]").closest('.form__item').removeClass("error");
			form.find(".passport-id[data-passport="+ item +"]").closest('.form__item').removeClass("error");
		}
	});
	$(document).on("change", ".date-for-passport", function(){
		var item = $(this).attr("data-passport");
		if($(".passport-date[data-passport="+ item +"]").length && $(".passport-date[data-passport="+ item +"]").val() != "" && $(".passport-type[data-passport="+ item +"]").val() != "5"){
			if(!checkPassportDate($(".passport-date[data-passport="+ item +"]").val(), $(this).val())){
				$(".passport-date[data-passport="+ item +"]").val("").trigger("focusout");
			}
		} else if($(".passport-date[data-passport="+ item +"]").length && $(".passport-date[data-passport="+ item +"]").val() != ""){
			var birthday = $(this).val().split(".");
			var birthdayDate = new Date(birthday[2], birthday[1] - 1, birthday[0]);
			var passport = $(".passport-date[data-passport="+ item +"]").val().split(".");
			var passportDate = new Date(passport[2], passport[1] - 1, passport[0]);
			if(birthdayDate.getTime() > passportDate.getTime()){
				$(".passport-date[data-passport="+ item +"]").val("").trigger("focusout");
			}
		}
	});
	// Паспорт END

	// Страны
	$(document).on('keyup keydown input focusout', 'input[data-mask=countries]', function() {
		this.value = autolayout(this.value);
		this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/\s\,/g, ',').replace(/^\-?/, "").replace(/\-?$/, "").replace(/[^а-яА-Я\-,() ]/gim, '');
	});
	$(document).on('keyup keydown input', 'input[data-mask=countries]', function() {
		this.value = autolayout(this.value);
		this.value = this.value.replace(/\s{2,}/g, ' ').replace(/\-{2,}/g, '-').replace(/\-\s/g, ' ').replace(/\s\-/g, ' ').replace(/\s\,/g, ',').replace(/^\-?/, "").replace(/[^а-яА-Я\-,() ]/gim, '');
	});
	// Страны END

	// Промокод
	$(document).on("keyup", "[data-mask=promo]", function(event){
		if(event.keyCode == 13){
			event.preventDefault();
			$(this).trigger('blur');
		}
	});
	$(document).on('keyup keydown input focusout', 'input[data-mask=promo]', function() {
		//this.value = autolayouttoeng(this.value);
		var res = /[^a-zA-ZЁёа-яА-Я#0-9 ]/g.exec(this.value);
		this.value = this.value.replace(res, '');
		this.value = this.value.toUpperCase();
	});
	// Промокод END

	/*Общее*/
	$(document).on("focusout", "input:not([type=checkbox]):not([type=radio]):not([type=file]), textarea", function() {
		if(!$(this).closest('.select2').length && !$(this).closest('.select').length){
			validate($(this));
		}
	});
	$(document).on("change", "input[type=checkbox], input[type=radio]", function() {
		validate($(this));
	});
	/*Общее END*/
});

//Перевод с латиницы на кириллицу
var layout = {'q': 'й', 'w': 'ц', 'e': 'у', 'r': 'к', 't': 'е', 'y': 'н', 'u': 'г', 'i': 'ш', 'o': 'щ', 'p': 'з', '[': 'х', ']': 'ъ', 'a': 'ф', 's': 'ы', 'd': 'в', 'f': 'а', 'g': 'п', 'h': 'р', 'j': 'о', 'k': 'л', 'l': 'д', ';': 'ж', '\'': 'э', 'z': 'я', 'x': 'ч', 'c': 'с', 'v': 'м', 'b': 'и', 'n': 'т', 'm': 'ь', 'Q': 'Й', 'W': 'Ц', 'E': 'У', 'R': 'К', 'T': 'Е', 'Y': 'Н', 'U': 'Г', 'I': 'Ш', 'O': 'Щ', 'P': 'З', '[': 'Х', ']': 'Ъ', 'A': 'Ф', 'S': 'Ы', 'D': 'В', 'F': 'А', 'G': 'П', 'H': 'Р', 'J': 'О', 'K': 'Л', 'L': 'Д', ';': 'Ж', '\'': 'Э', 'Z': '?', 'X': 'ч', 'C': 'С', 'V': 'М', 'B': 'И', 'N': 'Т', 'M': 'Ь', '.': '.', };
function autolayout(val) {
	var str = val;
	var r = '';
	for (var i = 0; i < str.length; i++) {
		r += layout[str.charAt(i)] || str.charAt(i)
	}
	return r
}
//Перевод с латиницы на кириллицу END

//Перевод с кириллицы на латиницу
var layout2 = {'й': 'q', 'ц': 'w', 'у': 'e', 'к': 'r', 'е': 't', 'н': 'y', 'г': 'u', 'ш': 'i', 'щ': 'o', 'з': 'p', 'х': '[', 'ъ': ']', 'ф': 'a', 'ы': 's', 'в': 'd', 'а': 'f', 'п': 'g', 'р': 'h', 'о': 'j', 'л': 'k', 'д': 'l', 'ж': ';', 'э': '\'', 'я': 'z', 'ч': 'x', 'с': 'c', 'м': 'v', 'и': 'b', 'т': 'n', 'ь': 'm', 'б': ',', 'ю': '.', 'Й': 'Q', 'Ц': 'W', 'У': 'E', 'К': 'R', 'Е': 'T', 'Н': 'Y', 'Г': 'U', 'Ш': 'I', 'Щ': 'O', 'З': 'P', 'Х': '[', 'Ъ': ']', 'Ф': 'A', 'Ы': 'S', 'В': 'D', 'А': 'F', 'П': 'G', 'Р': 'H', 'О': 'J', 'Л': 'K', 'Д': 'L', 'Ж': ';', 'Э': '\'', 'Я': 'Z', 'Ч': 'X', 'С': 'C', 'М': 'V', 'И': 'B', 'Т': 'N', 'Ь': 'M', 'Б': ',', 'Ю': '.', '"': '@', };
function autolayouttoeng(val) {
	var str = val;
	var r = '';
	for (var i = 0; i < str.length; i++) {
		r += layout2[str.charAt(i)] || str.charAt(i)
	}
	return r
}
//Перевод с кириллицы на латиницу END

//Перевод с латиницы на кириллицу без символов
var layout3 = {'q': 'й', 'w': 'ц', 'e': 'у', 'r': 'к', 't': 'е', 'y': 'н', 'u': 'г', 'i': 'ш', 'o': 'щ', 'p': 'з', '[': 'х', ']': 'ъ', 'a': 'ф', 's': 'ы', 'd': 'в', 'f': 'а', 'g': 'п', 'h': 'р', 'j': 'о', 'k': 'л', 'l': 'д', ';': 'ж', '\'': 'э', 'z': 'я', 'x': 'ч', 'c': 'с', 'v': 'м', 'b': 'и', 'n': 'т', 'm': 'ь', 'Q': 'Й', 'W': 'Ц', 'E': 'У', 'R': 'К', 'T': 'Е', 'Y': 'Н', 'U': 'Г', 'I': 'Ш', 'O': 'Щ', 'P': 'З', 'A': 'Ф', 'S': 'Ы', 'D': 'В', 'F': 'А', 'G': 'П', 'H': 'Р', 'J': 'О', 'K': 'Л', 'L': 'Д', 'Z': 'Я', 'X': 'ч', 'C': 'С', 'V': 'М', 'B': 'И', 'N': 'Т', 'M': 'Ь', '.': 'ю', ',': 'б', '`': 'ё'};
function autolayoutNotSym(val){
	var str = val;
	var r = '';
	for (var i = 0; i < str.length; i++) {
		r += layout3[str.charAt(i)] || str.charAt(i)
	}
	return r
}
//Перевод с латиницы на кириллицу без символов END

/*Проверка на совершеннолетие*/
function checkAdult(item, noErrors) {
	noErrors = noErrors == true ? true : false;
	var data = item.val();
	var date1 = data.split(".");
	var day = date1[0];
	var month = date1[1];
	var year = date1[2];
	var age = 18;
	var phpTime = $("input[name=timePhp]").val().split(".");
	var mydate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	mydate.setFullYear(year, month - 1, day);
	var currdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	currdate.setFullYear(currdate.getFullYear() - age);
	var regexp = /^[0-9]{2}[.]{1}[0-9]{2}[.]{1}[0-9]{4}$/;
	if (!regexp.test(data)) {
		if(!noErrors) {
			item.closest('.form__item').addClass("error");
			item.closest('.form__item').find(".validation-error").text("Некорректная дата");
		}
		return false;
	}
	if ((currdate - mydate) < 0) {
		if(!noErrors) {
			item.closest('.form__item').addClass("error");
			item.closest('.form__item').find(".validation-error").text("Не моложе 18 лет");
		}
		return false;
	}
	if (!checkDate(item.val())) {
		if(!noErrors) {
			item.closest('.form__item').addClass("error");
			item.closest('.form__item').find(".validation-error").text("Некорректная дата");
		}
		return false;
	} else {
		if(!noErrors) {
			item.closest('.form__item').removeClass("error");
		}
		return true;
	}
}
function isAdult(item) {
	var data = item.val();
	var date1 = data.split(".");
	var day = date1[0];
	var month = date1[1];
	var year = date1[2];
	var age = 18;
	var phpTime = $("input[name=timePhp]").val().split(".");
	var mydate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	mydate.setFullYear(year, month - 1, day);
	var currdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	currdate.setFullYear(currdate.getFullYear() - age);
	var regexp = /^[0-9]{2}[.]{1}[0-9]{2}[.]{1}[0-9]{4}$/;
	if (!regexp.test(data)) {
		return false;
	}
	if ((currdate - mydate) < 0) {
		return false;
	}
	if (!checkDate(item.val())) {
		return false;
	} else {
		return true;
	}
}
/*Проверка на совершеннолетие END*/

/*Проверка на несовершеннолетие*/
function checkNotAdult(item) {
	var data = item.val();
	var date1 = data.split(".");
	var day = date1[0];
	var month = date1[1];
	var year = date1[2];
	var age = 18;
	var phpTime = $("input[name=timePhp]").val().split(".");
	var mydate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	mydate.setFullYear(year, month - 1, day);
	var currdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	currdate.setFullYear(currdate.getFullYear() - age);
	var currdate2 = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	var regexp = /^[0-9]{2}[.]{1}[0-9]{2}[.]{1}[0-9]{4}$/;
	if (!regexp.test(data)) {
		item.closest('.form__item').addClass("error");
		item.closest('.form__item').find(".validation-error").text("Некорректная дата");
		return !1
	}
	if ((currdate - mydate) >= 0) {
		item.closest('.form__item').addClass("error");
		item.closest('.form__item').find(".validation-error").text("Не старше 18 лет");
		item.val("");
		return !1
	}
	if ((currdate2 - mydate) < 0) {
		item.closest('.form__item').addClass("error");
		item.closest('.form__item').find(".validation-error").text("Некорректная дата");
		return !1
	}
	if (!checkDate(item.val())) {
		item.closest('.form__item').addClass("error");
		item.closest('.form__item').find(".validation-error").text("Некорректная дата");
		return !1
	} else {
		item.closest('.form__item').removeClass("error");
		item.addClass("noempty");
		item.closest('.form__item').addClass("noempty");
		return !1
	}
}
/*Проверка на несовершеннолетие END*/

/*Проверка валидности даты*/
function checkDate(item) {
	var date1 = item.split(".");
	var str = date1[2] + '-' + date1[1] + '-' + date1[0];
	if (new Date(str) == 'Invalid Date') {
		return !1
	}
	return !0
}

function validateDate(value) {
	var phpTime = $("input[name=timePhp]").val().split(".");
	birthday_date = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	birthday_date.setFullYear(birthday_date.getFullYear() - bithdayMaxYears);
	var arrD = value.split(".");
	arrD[1] -= 1;
	var d = new Date(arrD[2], arrD[1], arrD[0]);
	var now = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	if ((d.getFullYear() == arrD[2]) && (d.getMonth() == arrD[1]) && (d.getDate() == arrD[0]) && arrD[2] > birthday_date.getFullYear() - 1 && arrD[2] <= now.getFullYear()) {
		return !0
	} else {
		return !1
	}
}
/*Проверка валидности даты END*/

/*Проверка срока годности паспорта*/
function checkPassportDate(passportDate, dudeDate){
	var dob = new Date(dudeDate.replace(/(\d{2}).(\d{2}).(\d{4})/, "$3-$2-$1"));
	var pssprtDate = new Date(passportDate.replace(/(\d{2}).(\d{2}).(\d{4})/, "$3-$2-$1"));

	var pDate20 = new Date(dob);
	pDate20.setFullYear(pDate20.getFullYear() + 20);
	var pDate45 = new Date(dob);
	pDate45.setFullYear(pDate45.getFullYear() + 45);

	var ageDude = parseInt(yearsDiff(new Date(dudeDate.replace(/(\d{2}).(\d{2}).(\d{4})/, "$3-$2-$1"))));
	// первая смена паспорта
	if (ageDude >= 20 && ageDude < 45) {
		if (pssprtDate < pDate20) { return false; }
	}
	// вторая смена паспорта
	if (ageDude >= 45) {
		if (pssprtDate < pDate45) { return false; }
	}

	if(ageDude < 20){
		if(yearsDiff2(dob, pssprtDate) < 14){
			return false;
		}
	}

	return true;
}
/*Проверка срока годности паспорта END*/

/*Есть ли человеку years лет*/
function checkyear(date, years) {
	var phpTime = $("input[name=timePhp]").val().split(".");
	var mydate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	mydate.setFullYear(date.getFullYear(), date.getMonth() - 1, date.getDate());
	var currdate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	currdate.setFullYear(currdate.getFullYear() - years);
	if (currdate.getTime() < mydate.getTime()) {
		return !1
	}
	return !0
}
/*Есть ли человеку years лет END*/

// разница в годах между текущей датой и @dt
function yearsDiff(dt){
	dt.setHours(0);
	dt.setMinutes(0);
	dt.setSeconds(0);
	dt.setMilliseconds(0);
	var phpTime = $("input[name=timePhp]").val().split(".");
	var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	if (dt > today) { 
		return 0; 
	}

	var crntDate = today;
	var yearDiff = parseInt(crntDate.getFullYear() - dt.getFullYear());
	
	// прошёл уже текущий год или ещё нет
	var dat4check = new Date(dt);
	dat4check.setFullYear(crntDate.getFullYear());
	if (dat4check > crntDate) { 
		yearDiff--; 
	}
	if (yearDiff <= 0) { 
		return 0; 
	}
	if (yearDiff === 1) {
		var monthDiff = parseInt(crntDate.getMonth() - dt.getMonth());
		if (monthDiff >= 0) {
			if (monthDiff == 0) {
				var dayDiff = parseInt(crntDate.getDate() - dt.getDate());
				if (dayDiff > 0) { 
					return yearDiff; 
				}
				else { 
					return 0; 
				}
			}
			else {
				return crntDate.getFullYear() - dt.getFullYear();
			}
		}
		else { 
			return 0; 
		}
	}
	else { 
		return yearDiff; 
	}
}
function yearsDiff2(dt, dt2){
	dt.setHours(0);
	dt.setMinutes(0);
	dt.setSeconds(0);
	dt.setMilliseconds(0);
	dt2.setHours(0);
	dt2.setMinutes(0);
	dt2.setSeconds(0);
	dt2.setMilliseconds(0);

	var phpTime = $("input[name=timePhp]").val().split(".");
	if (dt > dt2) { 
		return 0; 
	}

	var crntDate = dt2;
	var yearDiff = parseInt(crntDate.getFullYear() - dt.getFullYear());
	
	// прошёл уже текущий год или ещё нет
	var dat4check = new Date(dt);
	dat4check.setFullYear(crntDate.getFullYear());
	if (dat4check > crntDate) { 
		yearDiff--; 
	}
	if (yearDiff <= 0) { 
		return 0; 
	}
	if (yearDiff === 1) {
		var monthDiff = parseInt(crntDate.getMonth() - dt.getMonth());
		if (monthDiff >= 0) {
			if (monthDiff == 0) {
				var dayDiff = parseInt(crntDate.getDate() - dt.getDate());
				if (dayDiff > 0) { 
					return yearDiff; 
				}
				else { 
					return 0; 
				}
			}
			else {
				return crntDate.getFullYear() - dt.getFullYear();
			}
		}
		else { 
			return 0; 
		}
	}
	else { 
		return yearDiff; 
	}
}
// разница в годах между текущей датой и @dt END

//Валидация
function validate(element) {
	if (element.prop("disabled") == !1) {
		if (element.attr('data-mask') == "checkbox") {
			if (element.is(":checked")) {
				element.closest('.form__item').removeClass('error');
				return true;
			} else {
				if (element.hasClass("required")) {
					element.closest('.form__item').addClass('error');
					return false;
				} else {
					element.closest('.form__item').removeClass('error');
					return true;
				}
			}
			return;
		}
		if (element.attr('data-mask') == "radio") {
			var name = element.attr("name");
			var form = element.closest("form");
			if (form.find("[name="+ name +"]:checked").length) {
				form.find("[name="+ name +"]").closest('.form__item').removeClass('error');
				return true;
			} else {
				if (element.hasClass("required")) {
					form.find("[name="+ name +"]").closest('.form__item').addClass('error');
					return false;
				} else {
					form.find("[name="+ name +"]").closest('.form__item').removeClass('error');
					return true;
				}
			}
			return;
		}
		if (element.attr('type') == "file") {
			if(!element.val()){
				if(element.hasClass('required')){
					element.closest('.form__item').addClass('error');
					element.closest('.form__item').children('.validation-error').text('Обязательно');
					return false;
				} else{
					element.closest('.form__item').removeClass('error');
					return true;
				}
			} else{
				element.closest('.form__item').removeClass('error');
				return true;
			}
			return;
		}
		if (element.closest('.select2').length) {
			if(!element.val()){
				if(element.hasClass('required')){
					element.closest('.form__item').addClass('error');
					element.closest('.form__item').find('.validation-error').text('Обязательно');
					return false;
				} else{
					element.closest('.form__item').removeClass('error');
					return true;
				}
			} else{
				element.closest('.form__item').removeClass('error');
				return true;
			}
			return;
		}
		if(element.closest('.select').length){
			if(!element.is(":visible")){
				return;
			}
			var items = [];
			if(element.attr("data-multiple")){
				if(element.closest('.select').find("li").find("input[type=checkbox]:checked").length){
					if(element.hasClass("required") && $.trim(element.val()) === "") {
						element.closest(".form__item").addClass("error");
						element.closest('.form__item').find(".validation-error").text("Выберите значения из списка");
						return false;
					} else {
						element.closest(".form__item").removeClass("error");
						return true;
					}
				} else{
					if(element.hasClass('required')){
						element.closest(".form__item").addClass("error");
						element.closest('.form__item').find(".validation-error").text("Выберите значения из списка");
						return false;
					} else{
						element.closest(".form__item").removeClass("error");
						return true;
					}
				}
			} else{
				if(element.val() != ""){
					element.closest('.select').find("li").find("a").each(function(){
						if($(this).attr("data-value")){
							items.push($(this).attr("data-value").toLowerCase());
						} else{
							items.push($(this).text().toLowerCase());
						}
					});

					if(items.indexOf(element.val().toLowerCase()) == -1 && !element.closest(".select")[0].hasAttribute("data-dadata-address-select") && !element.closest(".select")[0].hasAttribute("data-dadata-fio-select")){
						element.closest(".form__item").addClass("error");
						element.closest('.form__item').find(".validation-error").text("Выберите значение из списка");
						return false;
					} else{
						element.closest(".form__item").removeClass("error");
						return true;
					}
				} else{
					if(element.hasClass('required')){
						element.closest(".form__item").addClass("error");
						element.closest('.form__item').find(".validation-error").text("Обязательно");
						return false;
					} else{
						element.closest(".form__item").removeClass("error");
						return true;
					}
				}
			}
			return;
		}
		element.val($.trim(element.val()));
		var eval = element.val();
		var elen = eval.length;
		if (elen == 0) {
			if (element.hasClass("required")) {
				element.closest('.form__item').addClass('error');
				element.closest('.form__item').find('.validation-error').text('Обязательно');
				if(element.closest('.form__item').hasClass('tooltipOnRequired')) {
					element.closest('.form__item').find('.tooltipstered').trigger('mouseenter');
				}
				return false;
			} else {
				element.closest('.form__item').removeClass('error');
				return true;
			}
		} else if (element.attr("data-mask") == "date-to"){
			var pattern = /^[0-9]{2}.[0-9]{2}.[0-9]{4}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest('.form__item').find('.validation-error').text('Обязательно');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") == "date-from"){
			var pattern = /^[0-9]{2}.[0-9]{2}.[0-9]{4}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest('.form__item').find('.validation-error').text('Обязательно');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr('data-mask') === 'phone') {
			var pattern = /^[+]{1}[0-9]{1} [(]{1}[0-9]{3}[)]{1} [0-9]{3}\-[0-9]{2}\-[0-9]{2}$/;
			if (!pattern.test(element[0].value)) {
				if (element.hasClass("required")) {
					element.closest(".form__item").addClass("error");
					element.closest('.form__item').find(".validation-error").text("Обязательно");
					return false;
				}
			} else {
				var code = element[0].value[4].toString();
				if (code != "3" && code != "4" && code != "5" && code != "6" && code != "9") {
					element.closest(".form__item").addClass("error");
					element.closest('.form__item').find(".validation-error").text("Некорректный ввод");
					return false;
				} else {
					if(element.closest(".form__item").hasClass("checked")){
						return true;
					}
					element.closest(".form__item").addClass('validating');
					element.closest(".form__item").append('<div class="validLoader"><svg class="svg-loader" xmlns="http://www.w3.org/2000/svg" width="115" height="115" viewBox="0 0 115.1318 115.337"><path fill="none" stroke="#B70D18" stroke-width="5" stroke-miterlimit="10" d="M109.342 2.8904c3.1043-1.1195 4.2099.252 2.4568 3.0479L46.0632 110.7717c-1.7531 2.7958-4.5406 2.7468-6.1944-.1089L3.2468 47.4273c-1.654-2.8556-.4671-6.108 2.6372-7.2275L109.342 2.8904z"></path></svg><div class="validLoaderTooltip">Проверка данных</div>');
					$.ajax({
						url: '/local/include/ajax/phone_validator.php',
						type: "POST",
						data: {
							"phone": element.val(),
							"formName": element.closest('form').find("[name=form_name]").val()
						},
						beforeSend: function(){
							
						},
						success: function(data){
							element.closest(".form__item").removeClass('validating');
							element.closest(".form__item").find(".validLoader").each(function(index, el) {
								$(this)[0].parentNode.removeChild($(this)[0]);
							});
							element.closest(".form__item").addClass("noempty");
							element.closest(".form__item").addClass("checked");
							setTimeout(function(){
								element.closest(".form__item").find(".preloaderTooltip").tooltipster("close");
							}, 500);
							if(data == "true"){
								element.closest(".form__item").removeClass('error');
								return true;
							} else{
								element.closest(".form__item").addClass('error');
								element.closest(".form__item").find(".validation-error").text("Некорректный телефон");
								return false;
							}
						},
					});
				}
			}
		} else if (element.attr('data-mask') == 'name') {
			var value = eval.replace(/(^\s*)|(\s*)$/g, '').replace(/\s{2,}/g, " ").replace(/([.!?]+)(?=\S)/g, "$1 ");
			var arrFN = value.split(" ");
			if (arrFN.length >= 2) {
				element.closest('.form__item').removeClass('error')
				return true;
			} else {
				element.closest('.form__item').addClass('error');
				element.closest('.form__item').find('.validation-error').text('Некорректный ввод');
				return false;
			}
		} else if (element.attr('data-mask') == 'singlename') {
			var value = eval.replace(/(^\s*)|(\s*)$/g, '').replace(/\s{2,}/g, " ").replace(/([.!?]+)(?=\S)/g, "$1 ");
			element.closest('.form__item').removeClass('error');
			return true;
		} else if (element.attr('data-mask') == 'email') {
			if(emailTimeout){
				clearTimeout(emailTimeout);
				emailTimeout = null;
			}
			if(emailValidatorAjax){
				emailValidatorAjax.abort();

				element.closest(".form__item").removeClass('validating');
				element.closest(".form__item").find(".validLoader").each(function(index, el) {
					$(this)[0].parentNode.removeChild($(this)[0]);
				});
				$(".preloaderTooltip").tooltipster("close");
				emailValidatorAjax = null;
			}

			if(element.closest(".form__item").hasClass("checked")){
				return true;
			}
			var d = element.val(),
				e = d.split("@")[0],
				f = d.split("@")[1];
			if (d.split("@").length > 2) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9]+[a-zA-Z0-9.-]*\.[a-zA-Z]{2,8}$/i.test(d)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (!e) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (!f) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (new RegExp("[а-яА-Я]").test(e)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (/[^a-zA-Z0-9_\-\.]/.test(e)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (!/^[0-9a-zA-Z_\-]/.test(e)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (!/[0-9a-zA-Z_\-]$/.test(e)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (e.length < 1 || e.length > 31) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else if (/[^a-zA-Z0-9]{2}/.test(f)) {
				element.parent().addClass('error');
				element.parent().children('.validation-error').text('Некорректный ввод');
				return false;
			}
			else {
				element.closest(".form__item").removeClass("error");
				element.closest(".form__item").removeClass("noempty");
				if(!element.hasClass("noValidateWithAjax")){
					element.closest(".form__item").addClass('validating');
					element.closest(".form__item").append('<div class="validLoader"><svg class="svg-loader" xmlns="http://www.w3.org/2000/svg" width="115" height="115" viewBox="0 0 115.1318 115.337"><path fill="none" stroke="#B70D18" stroke-width="5" stroke-miterlimit="10" d="M109.342 2.8904c3.1043-1.1195 4.2099.252 2.4568 3.0479L46.0632 110.7717c-1.7531 2.7958-4.5406 2.7468-6.1944-.1089L3.2468 47.4273c-1.654-2.8556-.4671-6.108 2.6372-7.2275L109.342 2.8904z"></path></svg><div class="validLoaderTooltip">Проверка данных</div>');
					if(emailTimeout){
						clearTimeout(emailTimeout);
						emailTimeout = null;
					}

					emailTimeout = setTimeout(function(){
						emailValidatorAjax = $.ajax({
							url: '/local/include/ajax/email_validator.php',
							type: "POST",
							data: {
								"email": element.val(),
								"formName": element.closest('form').find("[name=form_name]").val()
							},
							beforeSend: function(){
								
							},
							success: function(data){
								element.closest(".form__item").removeClass('validating');
								element.closest(".form__item").find(".validLoader").each(function(index, el) {
									$(this)[0].parentNode.removeChild($(this)[0]);
								});
								element.closest(".form__item").addClass("noempty");
								element.closest(".form__item").addClass("checked");
								setTimeout(function(){
									$(".preloaderTooltip").tooltipster("close");
								}, 500);
								if(data == "true"){
									element.closest(".form__item").removeClass('error');
									return true;
								} else{
									element.closest(".form__item").addClass('error');
									element.closest(".form__item").find(".validation-error").text("Невалидный e-mail");
									return false;
								}
							},
						});
					}, 10);
				}
			}
		} else if (element.attr('data-mask') == "agentnumber") {
			if (element.val().length < 6) {
				element.closest(".form__item").addClass('error');
				element.closest(".form__item").find('.validation-error').text('Минимальное количество символов - 6');
				return false;
			} else {
				element.closest(".form__item").removeClass('error');
				return true;
			}
		} else if(element.attr('data-mask') == "dogovor"){
			var x = 1;
			var bool = true;
			for(var i = 1; i < element.val().length; ++i){
				if(element.val()[i] == element.val()[i - 1]){
					x++;
				}
				else{
					x = 1;
				}
				if(x > 3 && (/[^0-9A-ZЁА-Я]/.test(element.val()[i]))){
					bool = false;
				}
			}
			if(element.val().length < 6){
				element.closest(".form__item").addClass('error');
				element.closest(".form__item").find('.validation-error').text('Минимальное количество символов - 6');
				return false;
			} else {
				if(!bool){
					element.closest(".form__item").addClass('error');
					element.closest(".form__item").find('.validation-error').text('Некорректный номер договора');
					return false;
				} else{
					element.closest(".form__item").removeClass('error');
					element.closest(".form__item").find('.validation-error').text('Обязательное поле');
					return true;
				}
			}
		} else if (element.attr("data-mask") === 'passport-id') {
			var pattern = /^[0-9]{4} [0-9]{6}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error")
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") === 'polis-number') {
			var pattern = /^[0-9]{10}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest(".form__item").find('.validation-error').text('Некорректный ввод');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") === 'code') {
			var pattern = /^[0-9]{4}\-[0-9]{4}\-[0-9]{4}\-[0-9]{4}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest(".form__item").find('.validation-error').text('Некорректный ввод');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") === 'passport-seria') {
			var pattern = /^[0-9]{4}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest(".form__item").find('.validation-error').text('Некорректный ввод');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") === 'passport-number') {
			var pattern = /^[0-9]{6}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest(".form__item").find('.validation-error').text('Некорректный ввод');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") === 'passport-code') {
			var pattern = /^[0-9]{3}\-[0-9]{3}$/;
			if (!pattern.test(element[0].value)) {
				element.closest(".form__item").addClass("error");
				element.closest(".form__item").find('.validation-error').text('Некорректный ввод');
				return false;
			} else {
				element.closest(".form__item").removeClass("error");
				return true;
			}
		} else if (element.attr("data-mask") == "birthday-adult") {
			if(checkAdult(element)){
				var date1 = element.val().split(".");
				var date = new Date(date1[2], date1[1], date1[0]);
				var maxYear = element.attr("data-max-year");
				if(!checkyear(date, parseInt(maxYear || bithdayMaxYears))){
					element.closest(".form__item").removeClass("error");
					return true;
				} else {
					element.val("");
					element.closest(".form__item").addClass("error");
					if(maxYear) {
						element.closest(".form__item").find('.validation-error').text('Не старше ' + maxYear + ' лет');
					} else {
						element.closest(".form__item").find('.validation-error').text('Некорректная дата');
					}
					return false;
				}
			} else{
				element.val("");
				element.closest(".form__item").addClass("error");
			}
		} else if (element.attr("data-mask") == "birthday-not-adult") {
			checkNotAdult(element);
		} else if (element.attr("data-mask") == "birthday") {
			var maxYear = element.attr("data-max-year");
			var minYear = element.attr("data-min-year") ? parseInt(element.attr("data-min-year")) : 0;
			if (validateDate(element.val())) {
				if(checkDate(element.val())){
					var date1 = element.val().split(".");
					var date = new Date(date1[2], date1[1], date1[0]);
					if (checkyear(date, minYear) && !checkyear(date, parseInt(element.attr("data-max-year") || bithdayMaxYears))) {
						element.closest(".form__item").removeClass("error");
						return true;
					} else {
						element.closest(".form__item").addClass("error");

						if(checkyear(date, parseInt(maxYear || bithdayMaxYears))){
							element.closest(".form__item").find('.validation-error').text('Не старше ' + maxYear + ' лет');
							element.val("");
						} else if(!checkyear(date, minYear)){
							element.closest(".form__item").find('.validation-error').text('Не моложе ' + minYear + ' ' + declOfNum(minYear, ['годa', 'лет', 'лет']));
							element.val("");
						} else{
							element.closest(".form__item").find('.validation-error').text('Некорректная дата');
						}
						return false;
					}
					if(element.attr("data-max-year")){
						if(checkyear(date, minYear) && !checkyear(date, parseInt(maxYear || bithdayMaxYears))){
							element.closest(".form__item").removeClass("error");
							return true;
						} else {
							element.closest(".form__item").addClass("error");
							if(checkyear(date, parseInt(maxYear || bithdayMaxYears))){
								element.closest(".form__item").find('.validation-error').text('Не старше ' + maxYear + ' лет');
								element.val("");
							} else if(!checkyear(date, minYear)){
								element.closest(".form__item").find('.validation-error').text('Не моложе ' + minYear + ' ' + declOfNum(minYear, ['годa', 'лет', 'лет']));
								element.val("");
							} else{
								element.closest(".form__item").find('.validation-error').text('Некорректная дата');
							}
							return false;
						}
					}
				} else{
					if (element.hasClass("required")) {
						element.closest(".form__item").addClass('error');
						element.closest(".form__item").find('.validation-error').text('Обязательное поле');
						return false;
					} else {
						element.closest(".form__item").removeClass('error');
						element.val("");
						return true;
					}
				}
			} else {
				if(checkDate(element.val())){
					var date1 = element.val().split(".");
					var date = new Date(date1[2], date1[1], date1[0]);

					element.closest(".form__item").addClass('error');

					if(checkyear(date, parseInt(maxYear || bithdayMaxYears))){
						element.closest(".form__item").find('.validation-error').text('Не старше ' + maxYear + ' лет');
						element.val("");
					} else if(!checkyear(date, minYear)){
						element.closest(".form__item").find('.validation-error').text('Не моложе ' + minYear + ' ' + declOfNum(minYear, ['годa', 'лет', 'лет']));
						element.val("");
					} else{
						element.closest(".form__item").find('.validation-error').text('Некорректная дата');
					}
					return false;
				} else{
					if (element.hasClass("required")) {
						element.closest(".form__item").addClass('error');
						element.closest(".form__item").find('.validation-error').text('Обязательное поле');
						return false;
					} else {
						element.closest(".form__item").removeClass('error');
						element.val("");
						return true;
					}
				}
			}
		} else if (element.attr("data-mask") == "passport-date") {
			if (validateDate(element.val())) {
				element.closest('.form__item').removeClass('error');
				return true;
			} else {
				if (element.hasClass("required")) {
					element.closest('.form__item').addClass('error');
					return false;
				} else {
					element.closest('.form__item').removeClass('error');
					return true;
				}
			}
		} else if (element.attr('data-mask') == 'promo') {
			if(element.val().length >= 3 && element.val().length <= 25){
				element.closest('.form__item').removeClass('error');
				return true;
			} else {
				element.closest('.form__item').addClass('error');
				if(element.val() == ""){
					element.closest('.form__item').find(".validation-error").html("Обязательно");
				} else{
					element.closest('.form__item').find(".validation-error").html("Некорректный код");
				}
				return false;
			}
		} else if(element.attr("data-mask") == "text"){
			var min = element.attr("data-min");
			var max = element.attr("data-max");
			if(element.val() == "") {
				if(element.hasClass('required')) {
					element.closest('.form__item').addClass("error");
					element.closest('.form__item').find(".validation-error").html("Обязательно");
					return false;
				} else {
					element.closest('.form__item').removeClass("error");
					return true;
				}
			} else if(element.val().length < min) {
				element.closest('.form__item').addClass("error");
				element.closest('.form__item').find(".validation-error").html("Минимальное количество символов - " + min);
				return false;
			} else if(element.val().length > max) {
				element.closest('.form__item').addClass("error");
				element.closest('.form__item').find(".validation-error").html("Максимальное количество символов - " + max);
				return false;
			} else {
				element.closest('.form__item').removeClass("error");
				return true;
			}
		} else if (element.attr('data-mask') == "dogovor2") {
			var item = element.closest('.form__item');
			var regexp = /\d/;
			// Если нет цифр
			if(!regexp.test(element.val())) {
				item.addClass('error');
				item.find('.validation-error').text('Обязательно должна быть хотя бы одна цифра');
			} else {
				if(element.closest(".form__item").hasClass("checked")){
					return true;
				}

				element.closest(".form__item").removeClass("error");
				element.closest(".form__item").removeClass("noempty");
				if(!element.hasClass("noValidateWithAjax")){
					element.closest(".form__item").addClass('validating');
					element.closest(".form__item").append('<div class="validLoader"><svg class="svg-loader" xmlns="http://www.w3.org/2000/svg" width="115" height="115" viewBox="0 0 115.1318 115.337"><path fill="none" stroke="#B70D18" stroke-width="5" stroke-miterlimit="10" d="M109.342 2.8904c3.1043-1.1195 4.2099.252 2.4568 3.0479L46.0632 110.7717c-1.7531 2.7958-4.5406 2.7468-6.1944-.1089L3.2468 47.4273c-1.654-2.8556-.4671-6.108 2.6372-7.2275L109.342 2.8904z"></path></svg><div class="validLoaderTooltip">Проверка данных</div>');
					if(contractTimeout){
						clearTimeout(contractTimeout);
						contractTimeout = null;
					}

					contractTimeout = setTimeout(function(){
						$.ajax({
							url: '/local/include/ajax/number_contract_validator.php',
							type: "POST",
							data: {
								"dogovor": element.val(),
								"formName": element.closest('form').find("[name=form_name]").val()
							},
							beforeSend: function(){
								
							},
							success: function(data){
								element.closest(".form__item").removeClass('validating');
								element.closest(".form__item").find(".validLoader").each(function(index, el) {
									$(this)[0].parentNode.removeChild($(this)[0]);
								});
								element.closest(".form__item").addClass("noempty");
								element.closest(".form__item").addClass("checked");
								setTimeout(function(){
									$(".preloaderTooltip").tooltipster("close");
								}, 500);
								
								
								if(data == "true"){
									$(".form__item--warn").hide();
									return true;
								} else {
									$(".form__item--warn").show();
									return false;
								}
								
							},
						});
					}, 10);
				}
			}
		} else {
			element.closest('.form__item').removeClass('error');
			return true;
		}
	}
}
//Валидация END

compareArray = function (a1, a2) {
    return a1.length == a2.length && a1.every((v,i)=>v === a2[i])
}

// Валидация даты вылета
function validateTravelDateStart($input, eventType) {
	var date_icon = $input.closest('.form__item').find(".icon-calendar");
	var selectDateString = $input.val().split(".");
	var selectDate = new Date(selectDateString[2], selectDateString[1] - 1, selectDateString[0]);

	var item = $input.attr("data-dateId");
	var dateTo_val = $(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val();
	var dateTo = dateTo_val.split(".");
	var phpTime = $("input[name=timePhp]").val().split(".");

	var startDate;
	var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	var minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	var maxDate;

	minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	maxDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);

	minDate.setDate(minDate.getDate() + 1);
	maxDate.setDate(minDate.getDate() + 365);

	if(selectDate.getTime() < minDate.getTime() || selectDate.getTime() > maxDate.getTime()){
		$input.val(moment(minDate).format("DD.MM.YYYY")).trigger("change");
		return false;
	}

	var dateFrom_val = $input.val();
		
	var dateFrom = dateFrom_val.split(".");
	dateFrom = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);

	var item = $input.attr("data-dateId");
	var dateTo_val = $(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val();

	var dateTo = dateTo_val.split(".");
	dateTo = new Date(dateTo[2], dateTo[1] - 1, dateTo[0]);

	var days = (dateTo - dateFrom) / (1000*60*60*24);
	if(days < 1){
		$(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val("");
	}

	if(days > 365){
		$(document).find("[data-mask=date-to][data-dateId='"+ item +"']").val("");
	}

	$input.val(dateFrom_val);
	if(eventType !== "input") {
		date_icon.removeClass("active");
		nextInput($input);
	}
}
// Валидация даты вылета END

// Валидация даты обратного вылета
function validateTravelDateBack($input, eventType) {
	var date_icon = $input.closest('.form__item').find(".icon-calendar");
	var selectDateString = $input.val().split(".");
	var selectDate = new Date(selectDateString[2], selectDateString[1] - 1, selectDateString[0]);

	var item = $input.attr("data-dateId");
	var dateFrom_val = $(document).find("[data-mask=date-from][data-dateId='"+ item +"']").val();

	var dateFrom = dateFrom_val.split(".");
	var phpTime = $("input[name=timePhp]").val().split(".");

	var startDate;
	var today = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	var minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	var maxDate;

	if(dateFrom != ""){
		minDate = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);
		minDate.setDate(minDate.getDate() + 1);
	} else{
		minDate.setDate(minDate.getDate() + 1);
	}


	minDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	maxDate = new Date(phpTime[2], phpTime[1] - 1, phpTime[0]);
	minDate.setDate(minDate.getDate() + 1);

	if(dateFrom != ""){
		minDate = new Date(dateFrom[2], dateFrom[1] - 1, dateFrom[0]);
		minDate.setDate(minDate.getDate() + 1);
		maxDate = new Date(minDate.getTime());
		maxDate.setDate(maxDate.getDate() + 364);

		var minDate2 = new Date(minDate);
		if($(document).find("[name=type][value=active]").is(":checked")){
			minDate2.setDate(minDate2.getDate() - 5);
		}
		if((maxDate.getTime() - minDate2.getTime()) / (1000 * 3600 * 24) + 1 >= 366){
			maxDate.setDate(maxDate.getDate() - ((maxDate.getTime() - minDate2.getTime()) / (1000 * 3600 * 24) + 1) + 365);
		}
	} else{
		minDate.setDate(minDate.getDate() + 1);
		maxDate.setDate(minDate.getDate() + 365);
	}

	if(selectDate.getTime() < minDate.getTime() || selectDate.getTime() > maxDate.getTime()){
		$input.val(moment(maxDate).format("DD.MM.YYYY"));
	}
}
// Валидация даты обратного вылета END